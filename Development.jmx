<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Environment " enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="channelCode" elementType="Argument">
            <stringProp name="Argument.name">channelCode</stringProp>
            <stringProp name="Argument.value">SMEW</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">cib-demo.apps.ocpnonprod-adc.me.alinma.internal</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">/utils/v1/esb-simulator</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="queuePrefix" elementType="Argument">
            <stringProp name="Argument.name">queuePrefix</stringProp>
            <stringProp name="Argument.value">SME</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="terminalId" elementType="Argument">
            <stringProp name="Argument.name">terminalId</stringProp>
            <stringProp name="Argument.value">0:0:0:0:0:0:0:1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LangPref" elementType="Argument">
            <stringProp name="Argument.name">LangPref</stringProp>
            <stringProp name="Argument.value">En</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxConnection" elementType="Argument">
            <stringProp name="Argument.name">maxConnection</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxWaitTime" elementType="Argument">
            <stringProp name="Argument.name">maxWaitTime</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_url" elementType="Argument">
            <stringProp name="Argument.name">db_url</stringProp>
            <stringProp name="Argument.value">jdbc:oracle:thin:@//10.0.28.123:1723/CBUAT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user" elementType="Argument">
            <stringProp name="Argument.name">db_user</stringProp>
            <stringProp name="Argument.value">cbsit</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="limitResultSet" elementType="Argument">
            <stringProp name="Argument.name">limitResultSet</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mode" elementType="Argument">
            <stringProp name="Argument.name">mode</stringProp>
            <stringProp name="Argument.value">dynamic</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_url_mcr" elementType="Argument">
            <stringProp name="Argument.name">db_url_mcr</stringProp>
            <stringProp name="Argument.value">jdbc:oracle:thin:@//10.0.28.130:1534/MCRSIT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_user_mcr" elementType="Argument">
            <stringProp name="Argument.name">db_user_mcr</stringProp>
            <stringProp name="Argument.value">mcr</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="shared_report_path" elementType="Argument">
            <stringProp name="Argument.name">shared_report_path</stringProp>
            <stringProp name="Argument.value">\\portal@SSL\DavWWWRoot\CIB\Shared Documents\Migration\testing\jmeter\NCIB_Test_JMeter</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="report_path" elementType="Argument">
            <stringProp name="Argument.name">report_path</stringProp>
            <stringProp name="Argument.value">C:/Shared/NCIB_test_results</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="db_info" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">db_conn</stringProp>
        <stringProp name="dbUrl">${db_url}</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">cbsit_321</stringProp>
        <stringProp name="poolMax">${maxConnection}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">${maxWaitTime}</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${db_user}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="db_info_mcr" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">db_conn_mcr</stringProp>
        <stringProp name="dbUrl">${db_url_mcr}</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">appsiuxp$ss</stringProp>
        <stringProp name="poolMax">${maxConnection}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">${maxWaitTime}</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${db_user_mcr}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="MCR Permission PreProcessor" enabled="true">
        <stringProp name="dataSource">db_conn_mcr</stringProp>
        <stringProp name="query">SELECT CIB_PERMISSION_NAME, FUNCTION_ID AS Permission_Id  FROM CORP_PERMISSION_DEFAULT_PROFILE</stringProp>
        <stringProp name="queryArguments"></stringProp>
        <stringProp name="queryArgumentsTypes"></stringProp>
        <stringProp name="queryTimeout">0</stringProp>
        <stringProp name="queryType">Select Statement</stringProp>
        <stringProp name="resultSetHandler">Store as String</stringProp>
        <stringProp name="resultSetMaxRows"></stringProp>
        <stringProp name="resultVariable">permissionResultSetVariable</stringProp>
        <stringProp name="variableNames"></stringProp>
      </JDBCPreProcessor>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="common functions" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">//********************************************************************************************
def prepareRequest(String service, String function){ 
	def requestId = org.apache.commons.lang3.RandomUtils.nextInt(0, 1000000000)+&quot;&quot;
	vars.put(&quot;random_id&quot;,requestId)
	vars.put(&quot;messages_req_id&quot;,&quot;Request Id = &quot;+vars.get(&quot;channelCode&quot;)+requestId+&quot;\r\n&quot;) 
	vars.put(&quot;service_name&quot;,service)
	vars.put(&quot;functionId&quot;,function)
	log.info(&quot;End.prepareRequest service=${service} function=${function}&quot;) 
	}
	props.put(&quot;prepareRequest&quot;,this.&amp;prepareRequest)
//********************************************************************************************
def prepareRequestId(){ 
	def requestId = org.apache.commons.lang3.RandomUtils.nextInt(0, 1000000000)+&quot;&quot;
	vars.put(&quot;random_id&quot;,requestId)
	vars.put(&quot;messages_req_id&quot;,&quot;Request Id = &quot;+vars.get(&quot;channelCode&quot;)+requestId+&quot;\r\n&quot;) 
	}
	props.put(&quot;prepareRequest&quot;,this.&amp;prepareRequest)
//********************************************************************************************
def printAssertions(String messages){ 
	if(messages){
			messages = messages.trim()
			if (messages.size() &gt; 1) {
				messages = vars.get(&apos;messages_req_id&apos;) +messages
			    vars.put(&quot;ErrorMessages&quot;, messages)
			}
		}
	}
	props.put(&quot;printAssertions&quot;,this.&amp;printAssertions)
//********************************************************************************************
def findFuncAccess(response, permissionId, approvalReq, enabled) {
    return response.Body.FuncsAccessList.FuncAccess.find {
        def itFuncGrpId = it.FuncGrpId.text()
        def itFuncId = it.FuncId.text()
        def itAcctNum = it.AcctNum.text()
        def itApprovalReq = it.ApprovalReq.text()
        def itEnabled = it.Enabled.text()

        ( (itFuncGrpId == permissionId.toString() &amp;&amp; itFuncId == &quot;GLBL&quot;) || itFuncId == permissionId.toString() ) 
&amp;&amp; itAcctNum == &quot;GLBL&quot; 
&amp;&amp; ( (itApprovalReq == approvalReq ) || (  approvalReq == null ))
&amp;&amp; itEnabled == enabled
    }
}
props.put(&quot;findFuncAccess&quot;,this.&amp;findFuncAccess)
//********************************************************************************************</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Test Paln" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Prepare NCIB Test" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer
import java.text.SimpleDateFormat
String jmxFilePath = FileServer.getFileServer().getBaseDir()
props.put(&apos;jmxFileDirectory&apos;, jmxFilePath);

// Get current date and time in the format yyyyMMddHHmmss666
SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMdHms&quot;);
String currentDateTime = sdf.format(new Date());
// Convert to long decimal
long decimalNumber = Long.parseLong(currentDateTime);
// Convert decimal to hexadecimal
String hexString = Long.toHexString(decimalNumber).toUpperCase();
// Store hexadecimal string into a variable for later use
props.put(&apos;reportPathProps&apos;, vars.get(&quot;shared_report_path&quot;)+&quot;\\&quot;+decimalNumber+&quot;_&quot;)
log.info(&quot;PATH==&quot;+props.get(&apos;reportPathProps&apos;))

//props.put(&apos;summaryReportName&apos;,&quot;NCIB_Test_Summary_&quot;+hexString+&apos;.csv&apos;)
props.put(&apos;summaryReportName&apos;,vars.get(&quot;shared_report_path&quot;) + &quot;\\ncib_test_summary_&quot;+decimalNumber+&quot;.csv&quot;)

</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CORP_PERMISSION_DEFAULT_PROFILE Request" enabled="true">
          <stringProp name="dataSource">db_conn_mcr</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query"> SELECT CIB_PERMISSION_NAME, FUNCTION_ID FROM CORP_PERMISSION_DEFAULT_PROFILE WHERE CIB_PERMISSION_NAME IS NOT NULL</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">CORP_PERMISSION_DEFAULT_PROFILE</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="MAPPING DB  PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonOutput



def listOfMaps = vars.getObject(&quot;CORP_PERMISSION_DEFAULT_PROFILE&quot;) 

def permissionMap = [:]

listOfMaps.each{
    map -&gt;
    def permissionId = map[&apos;FUNCTION_ID&apos;]
    def permissionName = map[&apos;CIB_PERMISSION_NAME&apos;]
    //log.info(permissionName+&quot;-&quot;+ permissionId)
    if (permissionName != null) {
    		if (!permissionMap.containsKey(permissionName)) {
        		permissionMap[permissionName] = []
		}
		permissionMap[permissionName] &lt;&lt; permissionId
    	}
 }

props.put(&quot;permissionMap&quot;, permissionMap)

def serializedListOfMaps = JsonOutput.toJson(listOfMaps)
props.put(&quot;mySerializedListOfMaps&quot;, serializedListOfMaps)


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Sprint 1" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_96_SERVICE_PACKAGE" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="desiredSvcPackId" elementType="Argument">
              <stringProp name="Argument.name">desiredSvcPackId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="desiredNameEn" elementType="Argument">
              <stringProp name="Argument.name">desiredNameEn</stringProp>
              <stringProp name="Argument.value">Default Service Package</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="11" elementType="Argument">
              <stringProp name="Argument.name">11</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
    &lt;MsgRqHdr&gt;&#xd;
        &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
        &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
        &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
        &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
        &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
    &lt;/MsgRqHdr&gt;&#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;SvcPacks&quot;,&quot;10170000&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def httpResponse = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
vars.put(&quot;ServiceResponse&quot;,httpResponse)






</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
    &lt;MsgRqHdr&gt;&#xd;
        &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
        &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
        &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
        &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
        &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
    &lt;/MsgRqHdr&gt;&#xd;
    &lt;Body&gt;&#xd;
        &lt;SvcPackId&gt;${SvcPackId}&lt;/SvcPackId&gt;&#xd;
    &lt;/Body&gt;&#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;SvcPackDtls&quot;,&quot;10250000&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert FuncsAccessList exists" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//FuncsAccessList</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def httpResponse = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
vars.put(&quot;ServiceResponse&quot;,httpResponse)






</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification ${service_name}" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.xml.XmlUtil 
def response = vars.get(&quot;ServiceResponse&quot;)

// Parse the XML response
def xml = new XmlSlurper().parseText(response)

// Extract the desired values from the XML
def svcPackId = xml.Body.SvcPacksList.SvcPackInfo.SvcPackId.text()
def nameEn = xml.Body.SvcPacksList.SvcPackInfo.NameEn.text()

// Validate the extracted values
def desiredSvcPackId = vars.get(&quot;desiredSvcPackId&quot;)
def desiredNameEn = vars.get(&quot;desiredNameEn&quot;)
 def messages = &quot;&quot;
if (!(svcPackId == desiredSvcPackId &amp;&amp; nameEn == desiredNameEn)) {
   messages +=&quot;Response validation failed. Expected service package with ID: ${desiredSvcPackId} and NameEn: ${desiredNameEn}. \n\r&quot;
}

 props.get(&quot;printAssertions&quot;)(messages)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_97_CUSTOMER_PROFILE" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Scenario Data" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SvcPackId" elementType="Argument">
              <stringProp name="Argument.name">SvcPackId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
 &#xd;
    &lt;MsgRqHdr&gt;&#xd;
 &#xd;
        &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
 &#xd;
        &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
 &#xd;
        &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
 &#xd;
        &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
 &#xd;
        &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
 &#xd;
    &lt;/MsgRqHdr&gt;&#xd;
 &#xd;
    &lt;Body&gt;&#xd;
 &#xd;
        &lt;SvcPackId&gt;${SvcPackId}&lt;/SvcPackId&gt;&#xd;
 &#xd;
    &lt;/Body&gt;&#xd;
 &#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;SvcPackCusts&quot;,&quot;10270000&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def httpResponse = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
vars.put(&quot;ServiceResponse&quot;,httpResponse)






</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${service_name} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM NCIB_97_CUSTOMER_PROFILE_CONFIRMED cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">myResultList</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
              <stringProp name="-55084682">CORP_LOGIN_NAME</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification ${service_name}" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult
import java.lang.Exception
log.info(&quot;************************Data Verification ***************************&quot;)


//Real Service Response
def httpResponse = vars.get(&quot;ServiceResponse&quot;)

def SvcPackCustsInqRs = new XmlParser().parseText(httpResponse)
log.info(vars.get(&quot;service_name&quot;)+&quot;Inq Response Status Code:&quot;+SvcPackCustsInqRs.MsgRsHdr.StatusCode.text())



def resultSetList = vars.getObject(&quot;myResultList&quot;)
 def messages = &quot;&quot;
for(row in resultSetList){
	
	
def cif=row[&quot;CIF&quot;];
def login_name = row[&quot;CORP_LOGIN_NAME&quot;]
     
 try{
 	def selectSvcPackCustInfo = SvcPackCustsInqRs.Body.SvcPackCustsList.SvcPackCustInfo.find { it.CIF.text() == cif }
 
 if(selectSvcPackCustInfo == null){
 	messages+=&quot;Can&apos;t find an entry in the Service Response for login_name=&quot;+login_name+&quot; and CIF=&quot;+cif+&quot;. \n\r&quot;
 	}
 else {if(!( selectSvcPackCustInfo.CustNickname.text() == login_name ))
{
	messages+=&quot;Mismatched login_name=&quot;+login_name+&quot; for CIF=&quot;+cif+&quot;. \n\r&quot;
}
 }
} catch ( Exception e ) {
  messages+=  &quot;Failed to parse XML response. CIF=&quot;+cif+&quot;.Detailed_Message=[&quot;+e.toString()+&quot;]. \n\r&quot;
}

}

 props.get(&quot;printAssertions&quot;)(messages)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_97_BANKING_ACCOUNTS_ACCESSABLE_ONLINE_CONFIRMED" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
              <stringProp name="-2064794860">BANKING_ACCOUNT_NUMBER</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view] PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
def resultMap = [:]
listOfMaps.eachWithIndex{
	map, index -&gt;
  def cif = map[&apos;CIF&apos;]
  def accountNumber = map[&apos;BANKING_ACCOUNT_NUMBER&apos;]
  if (!resultMap.containsKey(cif)) {
    resultMap[cif] = []
      def variableName = &quot;vars_db_cifs_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, cif)
	  }
  }
  resultMap[cif] &lt;&lt; accountNumber
}

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_cifs&quot;, resultMap.keySet().toArray())
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach CIF in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">currentCIF</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
 &#xd;
    &lt;MsgRqHdr&gt;&#xd;
 &#xd;
        &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
 &#xd;
        &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
 &#xd;
        &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
 &#xd;
        &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
 &#xd;
        &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
           &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${currentCIF}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
    &lt;UsrId&gt;10005686&lt;/UsrId&gt;&#xd;
 &#xd;
    &lt;/MsgRqHdr&gt;&#xd;
 &#xd;
    &lt;Body&gt;&#xd;
 &#xd;
        &lt;CIF&gt;${currentCIF}&lt;/CIF&gt;&#xd;
 &#xd;
    &lt;/Body&gt;&#xd;
 &#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustAcctsAccess&quot;,&quot;10280000&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">

def httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;currentCIF&quot;), httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${currentCIF}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult 
import java.text.SimpleDateFormat
import java.util.Date
import oracle.sql.TIMESTAMP

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;currentCIF&quot;))
log.info(&quot;httpResponse=&quot; + httpResponse)
def custAcctsAccessInqRs = new XmlParser().parseText(httpResponse)

def dbResult = props.get(&quot;db_rs&quot;)
def messages =  &quot;&quot;

dbResult.each { cif, bankingAccountsFromDB -&gt;
    try {
        bankingAccountsFromDB.each { bankingAccountNumber -&gt;
            def selectAcctAccess = custAcctsAccessInqRs.Body.AcctsAccessList.AcctAccess.find { it.AcctNum.text() == bankingAccountNumber }

            if (selectAcctAccess == null) {
                messages += &quot;Can&apos;t find an entry in the Service Response for BANKING_ACCOUNT_NUMBER=&quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot;.\n\r&quot;
            } else {
                if (selectAcctAccess.Enabled.text() != &apos;Y&apos;) {
                    messages += &quot;Account with banking account number &quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot; is not enabled.\n\r&quot;
                }
            }
        }
    } catch (Exception e) {
        messages += &quot;Failed to parse XML response. CIF=&quot; + cif + &quot;. Detailed_Message=[&quot; + e.toString() + &quot;].\n\r&quot;
    }
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_97_CUSTOMER_CREATION_HISTORY" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Scenario Data" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SvcPackId" elementType="Argument">
              <stringProp name="Argument.name">SvcPackId</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
 &#xd;
    &lt;MsgRqHdr&gt;&#xd;
 &#xd;
        &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
 &#xd;
        &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
 &#xd;
        &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
 &#xd;
        &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
 &#xd;
        &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
 &#xd;
    &lt;/MsgRqHdr&gt;&#xd;
 &#xd;
    &lt;Body&gt;&#xd;
 &#xd;
        &lt;SvcPackId&gt;${SvcPackId}&lt;/SvcPackId&gt;&#xd;
 &#xd;
    &lt;/Body&gt;&#xd;
 &#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;SvcPackCusts&quot;,&quot;10270000&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
def httpResponse = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
vars.put(&quot;ServiceResponse&quot;,httpResponse)






</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${service_name} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">myResultList</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&quot;db_view&quot;,&quot;NCIB_97_CUSTOMER_CREATION_HISTORY&quot;)
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
              <stringProp name="-55084682">CORP_LOGIN_NAME</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification ${service_name}" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult 
import java.text.SimpleDateFormat
import java.util.Date
import oracle.sql.TIMESTAMP

log.info(&quot;************************Data Verification ***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse&quot;)
def SvcPackCustsInqRs = new XmlParser().parseText(httpResponse)
log.info(vars.get(&quot;service_name&quot;) + &quot; Inq Response Status Code: &quot; + SvcPackCustsInqRs.MsgRsHdr.StatusCode.text())

def resultSetList = vars.getObject(&quot;myResultList&quot;)
def messages =  &quot;&quot;

for (row in resultSetList) {
    def create_date = row[&quot;CREATE_DATE&quot;]
    def cif = row[&quot;CIF&quot;]

    try {
        def selectSvcPackCustInfo = SvcPackCustsInqRs.Body.SvcPackCustsList.SvcPackCustInfo.find { it.CIF.text() == cif }

        if (selectSvcPackCustInfo == null) {
            messages += &quot;Can&apos;t find an entry in the Service Response for create_date=&quot; + create_date + &quot; and CIF=&quot; + cif + &quot;.\n\r&quot;
        } else {
def xmlDate = selectSvcPackCustInfo.CreationTmstmp.text() 
def xmlDateFormat = new SimpleDateFormat(&apos;yyyy-MM-dd&apos;)
def dateFromXml = xmlDateFormat.parse(xmlDate)
def dateFromDB = new Date(((TIMESTAMP) create_date).toJdbc().getTime())

// Removing the time component from dateFromDB
def dbDateFormat = new SimpleDateFormat(&apos;yyyy-MM-dd&apos;)
def dateFromDBWithoutTime = dbDateFormat.parse(dbDateFormat.format(dateFromDB))

            if (dateFromXml != dateFromDBWithoutTime) {
                messages += &quot;Mismatched Source DB create_date=&quot; + dateFromDB + &quot; and Service response create date =&quot;+dateFromXml+&quot;for CIF=&quot; + cif + &quot;.\n\r&quot;
            }
        }
    } catch (Exception e) {
        messages += &quot;Failed to parse XML response. CIF=&quot; + cif + &quot;. Detailed_Message=[&quot; + e.toString() + &quot;].\n\r&quot;
    }
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Sprint 3" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_107_ACCOUNT_ACCESS_CUSTOMER_LEVEL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
def resultMap = [:]
listOfMaps.eachWithIndex{
	map, index -&gt;
  def cif = map[&apos;CIF&apos;]
  def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]
  def accountOrBeneficiary = map[&apos;ACCOUNT_OR_BENEFICIARY&apos;]
  if (!resultMap.containsKey(cif)) {
    resultMap[cif] = []
      def variableName = &quot;vars_db_cifs_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, cif+&quot;_&quot;+accountNumber+&quot;_&quot;+accountOrBeneficiary)
	  }
  }
  resultMap[cif] &lt;&lt; accountNumber
}

props.put(&quot;db_rs&quot;, resultMap)

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach CIF in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt; &#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${currentCIF}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
    &lt;CIF&gt;${currentCIF}&lt;/CIF&gt;&#xd;
     &lt;AcctNum&gt;${account_}&lt;/AcctNum&gt;&#xd;
  &lt;/Body&gt;&#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustPermissions&quot;,&quot;10260000&quot;)

def current = vars.get(&quot;current&quot;)



def result = current.split(&quot;_&quot;)
	def currentCIF =  result[0].toString()
if (currentCIF) {
	vars.put(&quot;currentCIF&quot;, currentCIF)
    def account_ = result[1].toString()
  
	if (account_) {
            vars.put(&quot;account_&quot;, account_)
            if(result.size()&gt;2){
            	vars.put(&quot;accountOrBeneficiary_&quot;,  result[2].toString())
            	}
            
        } else {
            log.error(&quot;No matching account found for CIF=&quot;+ currentCIF)
        }
	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${currentCIF}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult 
import java.text.SimpleDateFormat
import java.util.Date
import oracle.sql.TIMESTAMP

log.info(&quot;************************Data Verification***************************&quot;)



def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))

def custAcctsAccessInqRs = new XmlParser().parseText(httpResponse)
def dbResult = props.get(&quot;db_rs&quot;)
def messages = &quot;&quot;

def  cif = vars.get(&apos;currentCIF&apos;)
def bankingAccountNumber = vars.get(&apos;account_&apos;)
    try {
        
            def selectAcctAccess = custAcctsAccessInqRs.Body.FuncsAccessList.FuncAccess.find { it.AcctNum.text() == bankingAccountNumber }

            if (selectAcctAccess == null) {
                messages += &quot;Can&apos;t find an entry in the Service Response for &quot;+vars.get(&quot;accountOrBeneficiary_&quot;) +&quot;=&quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot;.\n\r&quot;
            } else {
                if (selectAcctAccess.Enabled.text() != &apos;N&apos;) {
                    messages += &quot;Account with &quot;+vars.get(&quot;accountOrBeneficiary_&quot;) +&quot; number &quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot; is not Restricted.\n\r&quot;
                }
            }
        
    } catch (Exception e) {
        messages += &quot;Failed to parse XML response. CIF=&quot; + cif + &quot;. Detailed_Message=[&quot; + e.toString() + &quot;].\n\r&quot;
    }

 props.get(&quot;printAssertions&quot;)(messages)



</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_107_ACCOUNT_ACCESS_DIVISION_LEVEL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.BUSINESS_CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1645806497">BUSINESS_CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
log.info(&quot;listOfMaps =&quot; + listOfMaps.toString())
def resultMap = [:]

listOfMaps.eachWithIndex { map, index -&gt;
    def cif = map[&apos;BUSINESS_CIF&apos;]
    def groupId = map[&apos;MCR_USER_GROUP_ID&apos;]
    def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]
    
   resultMap.computeIfAbsent(groupId, { [cif, []] })[1] &lt;&lt; accountNumber
      resultMap[groupId][0] = cif
    
             
      def variableName = &quot;vars_db_groups_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, cif+&quot;_&quot;+groupId+&quot;_&quot;+accountNumber)
	  //  log.info(&quot;//////////////////////variableName=&quot;+variableName)
	  }
}

props.put(&quot;db_rs&quot;, resultMap)
//props.put(&quot;db_groups&quot;, resultMap.keySet().toArray())
//vars.put(&quot;db_groups&quot;, resultMap.keySet().toArray())
log.info(&quot;resultMap =&quot; + resultMap.toString())
log.info(&quot;resultMap.keySet().toArray() =&quot; + resultMap.keySet().toArray().toString())</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_groups</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${_cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
  &lt;GrpId&gt;${group_}&lt;/GrpId&gt;&#xd;
    &lt;AcctNum&gt;${account_}&lt;/AcctNum&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;GrpPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW123456789&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;         &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;checker&lt;/NameEn&gt;         &lt;NameAr&gt;checker&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/GrpPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;GrpPermissions&quot;,&quot;10280000&quot;)

def dbResult = props.get(&quot;db_rs&quot;) 
def currentGROUP = vars.get(&quot;current&quot;)

def result = currentGROUP.split(&quot;_&quot;)
 if ( result[0].toString()) {
    vars.put(&quot;_cif&quot;, result[0].toString())
    
    if (result[1].toString()) {
            vars.put(&quot;group_&quot;, result[1].toString())
            
            if (result[2].toString()) {
                vars.put(&quot;account_&quot;, result[2].toString())
              } else {
             log.error(&quot;No matching account found for cif=&quot;+result[0].toString()+&quot; and group = &quot;+result[1].toString())
           }
    
        } else {
            log.error(&quot;No matching group found for cif=&quot;+result[0].toString())
        }
    
    
} else {
    log.error(&quot;No matching data found for CIF_AccountNumber=}&quot;+result[0].toString())
}

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} group-account=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult
        import groovy.util.XmlSlurper

        log.info(&quot;************************Data Verification***************************&quot;)

        def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
      

        def custAcctsAccessInqRs = new XmlSlurper().parseText(httpResponse)
  

        def dbResult = props.get(&quot;db_rs&quot;)
        def messages =  &quot;&quot;
def currentRow = vars.get(&quot;current&quot;)
def currentArray = currentRow.split(&quot;_&quot;)
def groupId = currentArray[1]


            def cif = currentArray[0]
            log.info(&quot;cif=&quot;+cif)
            def accountNumber = currentArray[2]
           
				try {
	                def selectAcctAccess = custAcctsAccessInqRs.Body.FuncsAccessList.FuncAccess.find {
	                    it.AcctNum.text() == accountNumber
	                  
	                }
	
	                if (selectAcctAccess) {
	                    if (selectAcctAccess.Enabled.text() != &apos;N&apos;) {
	                        messages += &quot;Account with GROUP_ID=${groupId} within  CIF=${cif} and ACCOUNT_NUMBER=${selectAcctAccess.AcctNum.text()} is not restricted.\n\r&quot;
	                    }
	                } else {
	                    messages += &quot;Can&apos;t find the account ${accountNumber} in the Service Response for GROUP_ID=${groupId} within  CIF=${cif}.\n\r&quot;
	                }
	            } catch (Exception e) {
	                messages += &quot;Failed to parse XML response. CIF=${cif}. Detailed_Message=[${e.toString()}].\n\r&quot;
	            }
			
		            
        


 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${current}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_107_ACCOUNT_ACCESS_USER_LEVEL" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
log.info(&quot;listOfMaps =&quot; + listOfMaps.toString())
def resultMap = [:]

listOfMaps.eachWithIndex { map, index -&gt;
    def cif = map[&apos;BUSINESS_CIF&apos;]
    def entityId = map[&apos;MCR_USER_ID&apos;]
    def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]
    
             
      def variableName = &quot;vars_db_groups_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, entityId+&quot;_&quot;+cif+&quot;_&quot;+accountNumber)
	  }
}

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_groups</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
  &lt;UsrId&gt;${userId_}&lt;/UsrId&gt;&#xd;
 &lt;AcctNum&gt;${account_}&lt;/AcctNum&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;UsrPermissions&quot;,&quot;10300000&quot;)
 
def current = vars.get(&quot;current&quot;)
def result = current.split(&quot;_&quot;)

if (result) {

        def cif = result[1]

        if (cif) {
            vars.put(&quot;cif_&quot;, cif.toString())
        } else {
            log.error(&quot;No matching CIF found for=${result}&quot;)
        }

         def userId = result[0]

        if (userId) {
            vars.put(&quot;userId_&quot;, userId.toString())
        } else {
            log.error(&quot;No matching user found for=${result}&quot;)
        }
def account = result[2]
          if (account) {
            vars.put(&quot;account_&quot;, account.toString())
        } else {
            log.error(&quot;No matching account found for=${result}&quot;)
        }
    
} else {
    log.error(&quot;No matching data found for=${result}&quot;)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${cif_} USER=${userId_} ACCOUNT=${account_}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult
        import groovy.util.XmlSlurper

        log.info(&quot;************************Data Verification***************************&quot;)

        def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
  

        def root = new XmlSlurper().parseText(httpResponse)

  
        def messages =  &quot;&quot;
 
def userId = vars.get(&quot;userId_&quot;)
def cif = vars.get(&quot;cif_&quot;)
def accountNumber = vars.get(&quot;account_&quot;)
				try {
	                def selectAcctAccess = root.Body.FuncsAccessList.FuncAccess.find {
	                    it.AcctNum.text() == accountNumber
	                }
	
	                if (selectAcctAccess) {
	                    if (selectAcctAccess.Enabled.text() != &apos;N&apos;) {
	                        messages += &quot;Account with USER_ID=${userId}, CIF=${cif}, and ACCOUNT_NUMBER=${selectAcctAccess.AcctNum.text()} is not restricted.\n\r&quot;
	                    }
	                } else {
	                    messages += &quot;Can&apos;t find an entry in the Service Response for USER_ID=${userId}, CIF=${cif}.\n\r&quot;
	                }
	            } catch (Exception e) {
	                messages += &quot;Failed to parse XML response. CIF=${cif}. Detailed_Message=[${e.toString()}].\n\r&quot;
	            }
			
		            
        
 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentGROUP}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_101_CUSTOMER_PERMISIONS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CUSTOMER_CIF = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1076067137">CUSTOMER_CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonOutput
def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
log.info(&quot;data from db:&quot;+listOfMaps.toString())
def resultMap = [:]
listOfMaps.eachWithIndex{	
	map, index -&gt;  
	def cif = map[&apos;CUSTOMER_CIF&apos;]  
	def objectId = map[&apos;PERMISSION_NAME&apos;]  
	if (!resultMap.containsKey(cif)) {    
	  resultMap[cif] = []      
	def variableName = &quot;vars_db_cifs_${index + 1}&quot;      
	if (!vars.get(variableName))
	{	    vars.put(variableName, cif)	  }  
	  
	} 
	 
	resultMap[cif] &lt;&lt; objectId
}
log.info(&quot;modified data:&quot;+resultMap.toString())
log.info(&quot;modified data keys:&quot;+resultMap.keySet().toArray().toString())
log.info(&quot;TESTTEST2&quot;)






props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_cifs&quot;, resultMap.keySet().toArray())


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${current}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;CIF&gt;${current}&lt;/CIF&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;         &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustPermissions&quot;,&quot;10260000&quot;)

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;

if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper 

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;)) 
def response = new XmlSlurper().parseText(httpResponse)
def permissionMap = vars.getObject(&quot;permissionFunctionMap&quot;)
def dbResult = props.get(&quot;db_rs&quot;)
def messages =  &quot;&quot;


    def cif = vars.get(&quot;current&quot;)
   
    def permissionNames = dbResult[cif]

    permissionNames.each { permissionName -&gt;
       
        def permissionIdList = permissionMap[permissionName]

        if (!permissionIdList) {
            messages += &quot;No Function Id found in the database table CORP_PERMISSION_DEFAULT_PROFILE for PERMISSION_NAME=${permissionName}.\n\r&quot;
            return // Skip further processing for this permissionName
        }

        try {

        	
        	 
            def allFunctionAccessListRestricted = permissionIdList.each { permissionId -&gt;
             def selectFuncAccess =  props.get(&quot;findFuncAccess&quot;)(response,permissionId , null , &apos;N&apos; )
            
               
if(!selectFuncAccess){
	if (selectFuncAccess != null &amp;&amp; selectFuncAccess.Enabled.text() != &apos;N&apos;) {
                   
                    messages += &quot;Permission is not restricted for USER_ID=${cif} and PERMISSION_NAME=${permissionName} Function ID=${permissionId} with Enabled=N &quot;\n\r&quot;
                    false
               
	}


            if (!allFunctionAccessListRestricted) {
                messages += &quot;Access-Function(s) of PERMISSION_NAME=${permissionName} Function IDs=${permissionIdList} for USER_ID=${cif} are not (all) restricted\n\r&quot;
            }

        } catch (Exception e) {
            messages += &quot;Failed to parse XML response. Detailed_Message=[${e.toString()}].\n\r&quot;
        }
    }


 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${current}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
		AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_103_DIVISIONS_PERMISSIONS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.BUSINESS_CIF = white_list.CIF 

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1645806497">BUSINESS_CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
log.info(&quot;listOfMaps =&quot; + listOfMaps.toString())
def resultMap = [:]

listOfMaps.eachWithIndex { map, index -&gt;
    def cif = map[&apos;BUSINESS_CIF&apos;]
    def groupId = map[&apos;MCR_USER_GROUP_ID&apos;]
    def operationName = map[&apos;OPERATION_NAME&apos;]
    
   resultMap.computeIfAbsent(groupId, { [cif, []] })[1] &lt;&lt; operationName
      resultMap[groupId][0] = cif
    
            
      
}

props.put(&quot;db_rs&quot;, resultMap)
//props.put(&quot;db_groups&quot;, resultMap.keySet().toArray())
//vars.put(&quot;db_groups&quot;, resultMap.keySet().toArray())
log.info(&quot;resultMap =&quot; + resultMap.toString())
log.info(&quot;resultMap.keySet().toArray() =&quot; + resultMap.keySet().toArray().toString())
def groupIds = resultMap.keySet().toArray()
groupIds.eachWithIndex{groupId, index-&gt;
def variableName = &quot;vars_db_groups_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, groupId)
	   log.info(&quot;//////////////////////variableName=&quot;+variableName+&quot;-&quot;+groupId)
	  } 
	}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_groups</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${_cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
  &lt;GrpId&gt;${current}&lt;/GrpId&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;GrpPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW123456789&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;         &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;checker&lt;/NameEn&gt;         &lt;NameAr&gt;checker&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/GrpPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;GrpPermissions&quot;,&quot;10290000&quot;)
def dbResult = props.get(&quot;db_rs&quot;) 
def currentGROUP = vars.get(&quot;current&quot;)
def groupData = dbResult[currentGROUP]

if (groupData) {
    

    	log.info(&quot;groupData=&quot;+groupData)
        def cif = groupData[0]
	log.info(&quot;cif=&quot;+cif)
        if (cif) {
            vars.put(&quot;_cif&quot;, cif.toString())
        } else {
            log.error(&quot;No matching CIF found for GROUP_ID=${currentGROUP}&quot;)
        }

       def requestId = org.apache.commons.lang3.RandomUtils.nextInt(0, 1000000000)+&quot;&quot;
vars.put(&quot;random_id&quot;,requestId)
vars.put(&quot;messages&quot;,&quot;Request Id = &quot;+vars.get(&quot;channelCode&quot;)+requestId+&quot;\r\n&quot;) 

        vars.put(&quot;service_name&quot;, &quot;GrpPermissions&quot;)
        vars.put(&quot;functionId&quot;, &quot;10290000&quot;)
    	vars.put(&quot;function_enabled&quot;, &quot;N&quot;)
} else {
    log.error(&quot;No matching data found for GROUP_ID=${currentGROUP}&quot;)
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} GROUPId=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
log.info(&quot;httpResponse=&quot; + httpResponse)

def custAcctsAccessInqRs = new XmlSlurper().parseText(httpResponse)
def permissionMap = vars.getObject(&quot;permissionFunctionMap&quot;)

 def dbResult = props.get(&quot;db_rs&quot;)
   def messages = &quot;&quot;

def groupId = vars.get(&quot;current&quot;)
def data = dbResult[groupId]
if (data) {
    def cif = data[0]
    log.info(&quot;cif=&quot; + cif)
    def operationNameList = data[1]
    log.info(&quot;operationNameList=&quot; + operationNameList)
    
    operationNameList.each { operationName -&gt;
        log.info(&quot;operationName-&gt;&quot; + operationName.toString())
        def operationIdList = permissionMap.get(operationName)
        log.info(&quot;operationIdList:&quot; + operationIdList)

        if (!operationIdList) {
            messages &lt;&lt; &quot;No Function Id found in the database table for OPERATION_NAME=${operationName}&quot;
        } else {
            def selectFuncAccessList = custAcctsAccessInqRs.Body.FuncsAccessList.FuncAccess.findAll { access -&gt;
                def operationId = access.FuncId.text()
                def operationEnabled = access.Enabled.text()
                operationIdList.contains(operationId) &amp;&amp; operationEnabled == &apos;Y&apos;
            }

            if (selectFuncAccessList.empty) {
                messages &lt;&lt; &quot;No valid entry in the Service Response for GROUP_ID=${groupId} OPERATION_NAME=${operationName}&quot;
            }
        }
    }
} else {
    messages &lt;&lt; &quot;No data found in the dbResult for GROUP_ID=${groupId}&quot;
}

 props.get(&quot;printAssertions&quot;)(messages)

</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${current}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_102_CUSTOMER_PERMISSIONS_PER_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CUSTOMER_CIF = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1076067137">CUSTOMER_CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;data from db:&quot;+listOfMaps.toString())
def resultMap = [:]
listOfMaps.eachWithIndex{
    map, index -&gt;
    def cif = map[&apos;CUSTOMER_CIF&apos;]
    def objectId = map[&apos;PERMISSION_NAME&apos;]
    def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]


 if (!resultMap.containsKey(cif)) {
        resultMap[cif] = [:] //[accountNumber, [:]]
      /*  def variableName = &quot;vars_db_cifs_${index + 1}&quot;
        if (!vars.get(variableName)) {
            vars.put(variableName, cif)
        }*/
    }
    if (!resultMap[cif].containsKey(accountNumber)) {
    	resultMap[cif][accountNumber] = [] 

	def variableName = &quot;vars_db_accountNumbers_${index + 1}&quot;
        if (!vars.get(variableName)) {
            vars.put(variableName, cif+&quot;_&quot;+accountNumber)
            log.info(&quot;vars_db_accountNumbers--&quot;+cif+&quot;_&quot;+accountNumber)
        }
    	
    }
    resultMap[cif][accountNumber].add(objectId)

       
}
log.info(&quot;db modified  data:&quot;+resultMap)
log.info(&quot;db modified-map&apos;s keys:&quot;+resultMap.keySet().toArray().toString())


props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_cifs&quot;, resultMap.keySet().toArray())
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_accountNumbers</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
  	&lt;AcctNum&gt;${account}&lt;/AcctNum&gt;&#xd;
  	&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustPermissions&quot;,&quot;10260000&quot;)


def current_CIF_Account = vars.get(&quot;current&quot;)
def result = current_CIF_Account.split(&quot;_&quot;)
	

if ( result[0].toString()) {
	vars.put(&quot;cif&quot;, result[0].toString())
    
	if (result[1].toString()) {
            vars.put(&quot;account&quot;, result[1].toString())
        } else {
            log.error(&quot;No matching account found for cif=&quot;+result[0].toString())
        }
	
	log.info(&quot;cif:&quot;+ vars.get(&quot;cif&quot;))
	log.info(&quot;account:&quot;+ vars.get(&quot;account&quot;))
	
} else {
    log.error(&quot;No matching data found for CIF_AccountNumber=}&quot;+result[0].toString())
}

//log.info(&quot;roop debug &quot;+vars.getClass())
/*def names= vars.getVariablesNames()
for (String name : names)
	log.info(&quot;var name: &quot;+name+&quot; value:&quot;+vars.get(name))
	
*/

/*vars.entrySet().each{ var -&gt; 

log.info(var.getKey()+&quot;----&quot;+var.getValue())
}*/</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper 

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
def permissionMap = vars.getObject(&quot;permissionFunctionMap&quot;) // Use getObject to get the map

def dbResult = props.get(&quot;db_rs&quot;)
log.info(&quot;db result&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot; + dbResult)

def messages =&quot;&quot;
def permissionNames = dbResult[vars.get(&quot;cif&quot;)][vars.get(&quot;account&quot;)]

def newMap = [:]

custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.each {
    def permissionId = it.FuncId.text()
    def enabled = it.Enabled.text()
    newMap.put(permissionId, enabled)  // Only focusing on &apos;Enabled&apos;
}

log.info(&quot;new map&gt;&gt;&gt;&gt;&gt;&quot; + newMap.toString())

permissionNames.each { permissionName -&gt;
    def permissionIdList = permissionMap[permissionName]
    log.info(&quot;permissionIdList:&quot; + permissionIdList)
    if (!permissionIdList) {
        messages += &quot;No Function Id found in the database table CORP_PERMISSION_DEFAULT_PROFILE for PERMISSION_NAME=${permissionName}.\n\r&quot;
    } else {
        log.info(&quot;working on db permission &quot; + permissionName)
        try {
            def notenabled = false
            def neverfound = true

            permissionIdList.each { id -&gt;
                log.info(&quot;working on id:&quot; + id + &quot; found:&quot; + newMap[id])
                if (newMap[id]) {
                    neverfound = false
                }

                if (newMap[id] &amp;&amp; newMap[id] != &apos;N&apos;) {
                    notenabled = true
                    log.info(&quot;XML Found &quot; + id + &quot; but not Enabled: &quot; + newMap[id])
                } else if (newMap[id]) {
                    log.info(&quot;XML Found &quot; + id + &quot; and enabled&quot;)
                } else {
                    log.info(&quot;XML Not found &quot; + id)
                }
            }

            if (notenabled) {
                messages += &quot;Permission with USER_ID=${vars.get(&quot;cif&quot;)} Account:${vars.get(&quot;account&quot;)} and PERMISSION_NAME=${permissionName} is not enabled.\n\r&quot;
            } else if (neverfound) {
                messages += &quot;Can&apos;t find an entry in the Service Response for USER_ID=${vars.get(&quot;cif&quot;)} Account:${vars.get(&quot;account&quot;)} for PERMISSION_NAME=${permissionName}\n\r&quot;
            }
        } catch (Exception e) {
            messages += &quot;Failed to parse XML response. Detailed_Message=[${e.toString()}].\n\r&quot;
        }
    }
}


 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_104_DIVISIONS_PERMISIONS_PER_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;data from db:&quot;+listOfMaps.toString())
def resultMap = [:]
listOfMaps.eachWithIndex{
    map, index -&gt;
    def cif = map[&apos;CIF&apos;]
    def objectId = map[&apos;OPERATION_NAME&apos;]
    def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]
    def groupId = map[&apos;MCR_USER_GROUP_ID&apos;]


if (!resultMap.containsKey(groupId)) {
        resultMap[groupId] = [:] 
    }
    if (!resultMap[groupId].containsKey(accountNumber)) {
        resultMap[groupId][accountNumber] = [] 

    def variableName = &quot;vars_db_accountNumbers_${index + 1}&quot;
        if (!vars.get(variableName)) {
            vars.put(variableName, cif+&quot;_&quot;+groupId+&quot;_&quot;+accountNumber)
            log.info(&quot;variableName:&quot;+ variableName)
        }
        
    }
    resultMap[groupId][accountNumber].add(objectId)

       
}

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_groupIds&quot;, resultMap.keySet().toArray())


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_accountNumbers</stringProp>
          <stringProp name="ForeachController.returnVal">current_cif_userId_accountNumber</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;GrpId&gt;${group_}&lt;/GrpId&gt;&#xd;
  	&lt;AcctNum&gt;${acct}&lt;/AcctNum&gt;&#xd;
&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;GrpPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW123456789&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;         &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;checker&lt;/NameEn&gt;         &lt;NameAr&gt;checker&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/GrpPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;GrpPermissions&quot;,&quot;10290000&quot;)


def current_cif_userId_accountNumber = vars.get(&quot;current_cif_userId_accountNumber&quot;)

def result = current_cif_userId_accountNumber.split(&quot;_&quot;)
    
if ( result[0].toString()) {
    vars.put(&quot;cif&quot;, result[0].toString())
    
    if (result[1].toString()) {
            vars.put(&quot;group_&quot;, result[1].toString())
            
            if (result[2].toString()) {
                vars.put(&quot;acct&quot;, result[2].toString())
              } else {
             log.error(&quot;No matching account found for cif=&quot;+result[0].toString()+&quot; and group = &quot;+result[1].toString())
           }
    
        } else {
            log.error(&quot;No matching group found for cif=&quot;+result[0].toString())
        }
    
    
} else {
    log.error(&quot;No matching data found for CIF_AccountNumber=}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current_cif_userId_accountNumber&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} . Group=${current_cif_userId_accountNumber}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper 

log.info(&quot;************************Data Verification***************************&quot;)

// Fetch the XML Response
def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current_cif_userId_accountNumber&quot;))

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
def permissionFunctionMap = vars.getObject(&quot;permissionFunctionMap&quot;)

// 1. Fetch db data
def dbResult = props.get(&quot;db_rs&quot;)

// 2. Iterate over permission names using provided keys
  def group = vars.get(&quot;group_&quot;)
  def account = vars.get(&quot;acct&quot;)
  log.info(&quot;dbResult=&quot;+dbResult)
log.info(&quot;group=&quot;+group)
log.info(&quot;account=&quot;+account)

def permissionsForuserAccount = dbResult[group][account]

log.info(&quot;db data-&gt;&quot; + permissionsForuserAccount.toString())
def messages = &quot;&quot;
// 3. Fetch CIF
    def cif = vars.get(&quot;cif&quot;)
 
permissionsForuserAccount.each { permissionName -&gt;
    log.info(&quot;permissionName-&gt;&quot; + permissionName)
    def permissionIds = vars.getObject(&quot;permissionFunctionMap&quot;).get(permissionName)
    log.info(&quot;permissionIds-&gt;&quot; + permissionIds)

    if(!permissionIds){
        messages += &quot;No Function Id found in the database table CORP_PERMISSION_DEFAULT_PROFILE for PERMISSION_NAME=${permissionName}.\n\r&quot;          
    } else {
        // 4. Handle multiple function IDs and the enabled condition
        permissionIds.each { permissionId -&gt;
            def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find {
                it.FuncId.text() == permissionId
            }

            if (selectFuncAccess != null) {
                if (selectFuncAccess.Enabled.text() != &apos;N&apos;) {
                messages += &quot;Permission with CIB_PERMISSION_NAME=${permissionName} and FUNCTION_ID=${permissionId} is not restricted for CIF=${cif}, userId=${user}, and account=${account}.\n\r&quot;
                }
            } else {
                messages += &quot;Can&apos;t find an entry in the Service Response for CIB_PERMISSION_NAME=${permissionName} and FUNCTION_ID=${permissionId}.\n\r&quot;
            }
        }
    }
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF_USER_ACCOUNT=${current_cif_userId_accountNumber}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_106_USER_PERMISSIONS_PER_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;data from db:&quot;+listOfMaps.toString())
def resultMap = [:]
listOfMaps.eachWithIndex{
    map, index -&gt;
    def cif = map[&apos;CIF&apos;]
    def objectId = map[&apos;PERMISSION_NAME&apos;]
    def accountNumber = map[&apos;ACCOUNT_NUMBER&apos;]
    def groupId = map[&apos;MCR_USER_ID&apos;]


if (!resultMap.containsKey(groupId)) {
        resultMap[groupId] = [:] 
    }
    if (!resultMap[groupId].containsKey(accountNumber)) {
        resultMap[groupId][accountNumber] = [] 

    def variableName = &quot;vars_db_accountNumbers_${index + 1}&quot;
        if (!vars.get(variableName)) {
            vars.put(variableName, cif+&quot;_&quot;+groupId+&quot;_&quot;+accountNumber)
          //  log.info(&quot;vars_db_accountNumbers_----&gt;&quot;+variableName+&quot;-&gt;&quot;+cif+&quot;_&quot;+groupId+&quot;_&quot;+accountNumber)
        }
        
    }
    resultMap[groupId][accountNumber].add(objectId)

       
}

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_groupIds&quot;, resultMap.keySet().toArray())

log.info(&quot;db_rs:&quot;+resultMap.toString())
//log.info(&quot;db_groupIds:&quot;+resultMap.keySet().toArray())


</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_accountNumbers</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;UsrId&gt;${user_}&lt;/UsrId&gt;&#xd;
  	&lt;AcctNum&gt;${account_}&lt;/AcctNum&gt;&#xd;
 &#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;UsrPermissions&quot;,&quot;10300000&quot;)
def current_cif_userId_accountNumber = vars.get(&quot;current&quot;)

def result = current_cif_userId_accountNumber.split(&quot;_&quot;)
    
if ( result[0].toString()) {
    vars.put(&quot;cif&quot;, result[0].toString())
    
    if (result[1].toString()) {
            vars.put(&quot;user_&quot;, result[1].toString())
            
            if (result[2].toString()) {
                vars.put(&quot;account_&quot;, result[2].toString())
              } else {
             log.error(&quot;No matching account found for cif=&quot;+result[0].toString()+&quot; and user = &quot;+result[1].toString())
           }
    
        } else {
            log.error(&quot;No matching user found for cif=&quot;+result[0].toString())
        }
    
    
} else {
    log.error(&quot;No matching data found for CIF_AccountNumber=}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)







</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
log.info(&quot;&gt;&gt;&gt;&gt;&gt;&gt;RESPONSE&quot; + httpResponse)
def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
def permissionFunctionMap = vars.getObject(&quot;permissionFunctionMap&quot;)
log.info(&quot;permissionFunctionMap -&gt;&quot; + permissionFunctionMap)

def dbResult = props.get(&quot;db_rs&quot;)
log.info(dbResult.toString())

def messages = []
def current_cif_userId_accountNumber = vars.get(&quot;current&quot;)

def result = current_cif_userId_accountNumber.split(&quot;_&quot;)
def cif = result[0].toString()
def user = result[1].toString()
def account = result[2].toString()

if (!account) {
    log.error(&quot;No matching account found for cif=${cif} and user=${user}&quot;)
} else {
    def userId = user
    def accountNumber = account
    def restrictedPermissions = dbResult?.get(cif)?.get(account)
    
    restrictedPermissions.each { permission -&gt;
        def permissionIds = permissionFunctionMap.get(permission)
        log.info(&quot;permissionIds:-&quot; + permissionIds)
        
        if (!permissionIds) {
            messages &lt;&lt; &quot;No Function Id found in the database table for PERMISSION_NAME=${permission} for User=${userId}, Account=${accountNumber}&quot;
        } else {
            def allPermissionsRestricted = permissionIds.every { permissionId -&gt;
                def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find {
                    it.FuncId.text() == permissionId &amp;&amp; it.Enabled.text() == &apos;N&apos; &amp;&amp; it.AcctNum.text() == accountNumber
                }
                log.info(&quot;selectFuncAccess=&quot; + selectFuncAccess)
                if (selectFuncAccess) {
                    true
                } else {
                    messages &lt;&lt; &quot;Can&apos;t find a restricted entry in the Service Response for PERMISSION_NAME=${permission} and FUNCTION_ID=${permissionId} for User=${userId}, Account=${accountNumber}&quot;
                    false
                }
            }

            if (allPermissionsRestricted) {
                messages &lt;&lt; &quot;All permissions for PERMISSION_NAME=${permission} are restricted for User=${userId}, Account=${accountNumber}.&quot;
            }
        }
    }
}

 props.get(&quot;printAssertions&quot;)(messages)

</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${current_cif_userId_accountNumber}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_105-USER_PERMISSIONS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_105_USER_PERMISSIONS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value">PERMISSION_NAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_USER_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">UsrPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10300000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def userId = map[usr_grp_column_name]
   // log.info(&quot;Debugging:userId=&quot;+userId)

    def permission_column_name = vars.get(&quot;permission_column_name&quot;)
    def permission = map[permission_column_name]
   // log.info(&quot;Debugging:permission=&quot;+permission)
    

    if (!resultMap.containsKey(userId)) {
        resultMap[userId] = [:]
    }

    if (!resultMap[userId].containsKey(cif)) {
        resultMap[userId][cif] = []
        
        variableList.add(userId+&quot;_&quot;+cif)
    }

    resultMap[userId][cif].add(permission)
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} userId_cif:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;UsrId&gt;${userId_var}&lt;/UsrId&gt;&#xd;
  	&lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
  &#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequestId&quot;)()

def current = vars.get(&quot;for_each_output_param&quot;)


def result = current.split(&quot;_&quot;)
	def userId =  result[0].toString()
if (userId) {
	vars.put(&quot;userId_var&quot;, userId)
    def cif = result[1].toString()
	if (cif) {
            vars.put(&quot;cif_var&quot;, cif)
            log.info(&quot;cif_var:&quot;+ cif)
        } else {
            log.error(&quot;No matching account found for userId=&quot;+ userId)
        }
	
	log.info(&quot;userId_var:&quot;+ vars.get(&quot;userId_var&quot;))
	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

log.info(&quot;************************Data Verification***************************&quot;)
def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))
def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
def permissionMap = vars.getObject(&quot;permissionFunctionMap&quot;)
def dbResult = props.get(&quot;db_rs&quot;)
def messages =  &quot;&quot;
def User_Id = vars.get(&quot;userId_var&quot;)
def CIF = vars.get(&quot;cif_var&quot;)
def permissionNames = dbResult[User_Id][CIF]


// For debug only
// TODO: Delete before the final test
def staticExcludedPermissions = [&apos;Reports&apos;,&apos;Access&apos;,&apos;Information Reporting&apos;,&apos;M_RTP&apos;,&apos;M_SPECIAL_RATE&apos;,&apos;Information Reporting - Intra Day Detail&apos;,&apos;Information Reporting - Intra Day Summary&apos;,&apos;Information Reporting - Non-zero Balance Report&apos;,&apos;Information Reporting - Previous Day Detail&apos;,&apos;Information Reporting - Previous Day Summary&apos;,&apos;Approvals Admin&apos;,&apos;Audit Reporting&apos;,&apos;BusinessAdmin&apos;,&apos;Division Management&apos;,&apos;Group Management&apos;,&apos;History&apos;,&apos;M_BULK_TRANS&apos;,&apos;M_PAY_ROLL&apos;,&apos;M_RTP&apos;,&apos;M_SPECIAL_RATE&apos;]


if (permissionNames) {
    permissionNames.each { permissionName -&gt;
        if (!staticExcludedPermissions.contains(permissionName)) {
            def permissionIdList = permissionMap[permissionName]
            if (!permissionIdList) {
                messages += &quot;No matching permissionId found for permission name in DB: ${permissionName}\n\r&quot;
            } else {
                permissionIdList.each { permissionIdFromDB -&gt;
                    def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { access -&gt;
                        access.FuncId.text() == permissionIdFromDB.toString() &amp;&amp; access.Enabled.text() == &apos;N&apos;
                    }

                    if (!selectFuncAccess) {
                        messages += &quot;Can&apos;t find an entry in the Service Response for USER_ID=${User_Id} CIF=${CIF} and PERMISSION_NAME=${permissionName} and Function_ID=${permissionIdFromDB} \n\r&quot;
                    }
                }
            }
        }
    }
} else {
    messages += &quot;No Permission name found in the dbResult for USER_ID=${User_Id} and CIF=${CIF}\n\r&quot;
}
 
 props.get(&quot;printAssertions&quot;)(messages)


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)


</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Sprint 4" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_113_SPRINT4_LIMITS_CUSTOMER" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;data from db:&quot; + listOfMaps.toString())
def resultMap = [:]

listOfMaps.eachWithIndex { map, index -&gt;
    def cif = map[&apos;CIF&apos;]
    def object_id = map[&apos;OPERATION_NAME&apos;]
    def limitPeriod = map[&apos;LIMIT_PERIOD&apos;]
    def limitAmount = map[&apos;LIMIT_AMOUNT&apos;]

    if (!resultMap.containsKey(cif)) {
        resultMap[cif] = []
         def variableName = &quot;vars_db_cifs_${index + 1}&quot;
	    if (!vars.get(variableName)) {
	        vars.put(variableName, cif)
	    }
    }

    resultMap[cif].add([object_id: object_id, limitPeriod: limitPeriod, limitAmount: limitAmount])

   
}

log.info(&quot;db modified data:&quot; + resultMap)
log.info(&quot;db modified map&apos;s keys:&quot; + resultMap.keySet().toArray().toString())

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_groupIds&quot;, resultMap.keySet().toArray())

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">current_cif</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${current_cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;CIF&gt;${current_cif}&lt;/CIF&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;CustPermissionsInqRs&gt;  &lt;MsgRsHdr&gt;  &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;  &lt;RqUID&gt;SMEWRequest Id = 212016944  &lt;/RqUID&gt;  &lt;/MsgRsHdr&gt;  &lt;Body&gt;  &lt;RecCtrlOut&gt;  &lt;MatchedRecs&gt;45&lt;/MatchedRecs&gt;  &lt;SentRecs&gt;45&lt;/SentRecs&gt;  &lt;/RecCtrlOut&gt;  &lt;CustNickname&gt;1250&lt;/CustNickname&gt;  &lt;SbcrptnStatus&gt;A&lt;/SbcrptnStatus&gt;  &lt;CreationTmstmp&gt;2023-05-24 16:15:56.912422&lt;/CreationTmstmp&gt;  &lt;SvcPackId&gt;1&lt;/SvcPackId&gt;  &lt;NameEn&gt;Default Service Package&lt;/NameEn&gt;  &lt;NameAr&gt;الباكج الافتراضية&lt;/NameAr&gt;  &lt;FuncsAccessList&gt;  &lt;FuncAccess&gt;  &lt;PermissionId&gt;156684&lt;/PermissionId&gt;  &lt;FuncGrpId&gt;95020020&lt;/FuncGrpId&gt;  &lt;FuncId&gt;39050000&lt;/FuncId&gt;  &lt;AcctNum&gt;GLBL&lt;/AcctNum&gt;  &lt;Enabled&gt;Y&lt;/Enabled&gt;  &lt;ApprovalReq&gt;N&lt;/ApprovalReq&gt;  &lt;DailyTrnsCount&gt;9999&lt;/DailyTrnsCount&gt;  &lt;WeeklyTrnsCount&gt;9999&lt;/WeeklyTrnsCount&gt;  &lt;MonthlyTrnsCount&gt;9999&lt;/MonthlyTrnsCount&gt;  &lt;UpperEnabled&gt;Y&lt;/UpperEnabled&gt;  &lt;UpperApprovalReq&gt;N&lt;/UpperApprovalReq&gt;  &lt;UpperTrnLimitAmt&gt;10000000000&lt;/UpperTrnLimitAmt&gt;  &lt;UpperTrnApprovalReq&gt;N&lt;/UpperTrnApprovalReq&gt;  &lt;UpperDailyTrnLimitAmt&gt;10000000000&lt;/UpperDailyTrnLimitAmt&gt;  &lt;UpperDailyTrnsCount&gt;100000&lt;/UpperDailyTrnsCount&gt;  &lt;UpperDailyApprovalReq&gt;N&lt;/UpperDailyApprovalReq&gt;  &lt;UpperWeeklyTrnLimitAmt&gt;10000000000&lt;/UpperWeeklyTrnLimitAmt&gt;  &lt;UpperWeeklyTrnsCount&gt;100000&lt;/UpperWeeklyTrnsCount&gt;  &lt;UpperWeeklyApprovalReq&gt;N&lt;/UpperWeeklyApprovalReq&gt;  &lt;UpperMonthlyTrnLimitAmt&gt;10000000000&lt;/UpperMonthlyTrnLimitAmt&gt;  &lt;UpperMonthlyTrnsCount&gt;100000&lt;/UpperMonthlyTrnsCount&gt;  &lt;UpperMonthlyApprovalReq&gt;N&lt;/UpperMonthlyApprovalReq&gt;  &lt;/FuncAccess&gt;  &lt;FuncAccess&gt;  &lt;PermissionId&gt;156694&lt;/PermissionId&gt;  &lt;FuncGrpId&gt;95020020&lt;/FuncGrpId&gt;  &lt;FuncId&gt;GLBL&lt;/FuncId&gt;  &lt;AcctNum&gt;GLBL&lt;/AcctNum&gt;  &lt;Enabled&gt;Y&lt;/Enabled&gt;  &lt;ApprovalReq&gt;N&lt;/ApprovalReq&gt;  &lt;TrnLimitAmt&gt;12&lt;/TrnLimitAmt&gt;  &lt;TrnApprovalReq&gt;N&lt;/TrnApprovalReq&gt;  &lt;DailyTrnLimitAmt&gt;13&lt;/DailyTrnLimitAmt&gt;  &lt;DailyTrnsCount&gt;9999&lt;/DailyTrnsCount&gt;  &lt;DailyApprovalReq&gt;N&lt;/DailyApprovalReq&gt;  &lt;WeeklyTrnLimitAmt&gt;14&lt;/WeeklyTrnLimitAmt&gt;  &lt;WeeklyTrnsCount&gt;9999&lt;/WeeklyTrnsCount&gt;  &lt;WeeklyApprovalReq&gt;N&lt;/WeeklyApprovalReq&gt;  &lt;MonthlyTrnLimitAmt&gt;15&lt;/MonthlyTrnLimitAmt&gt;  &lt;MonthlyTrnsCount&gt;9999&lt;/MonthlyTrnsCount&gt;  &lt;MonthlyApprovalReq&gt;N&lt;/MonthlyApprovalReq&gt;  &lt;UpperEnabled&gt;Y&lt;/UpperEnabled&gt;  &lt;UpperApprovalReq&gt;N&lt;/UpperApprovalReq&gt;  &lt;UpperTrnLimitAmt&gt;10000000000&lt;/UpperTrnLimitAmt&gt;  &lt;UpperTrnApprovalReq&gt;N&lt;/UpperTrnApprovalReq&gt;  &lt;UpperDailyTrnLimitAmt&gt;10000000000&lt;/UpperDailyTrnLimitAmt&gt;  &lt;UpperDailyTrnsCount&gt;100000&lt;/UpperDailyTrnsCount&gt;  &lt;UpperDailyApprovalReq&gt;N&lt;/UpperDailyApprovalReq&gt;  &lt;UpperWeeklyTrnLimitAmt&gt;10000000000&lt;/UpperWeeklyTrnLimitAmt&gt;  &lt;UpperWeeklyTrnsCount&gt;100000&lt;/UpperWeeklyTrnsCount&gt;  &lt;UpperWeeklyApprovalReq&gt;N&lt;/UpperWeeklyApprovalReq&gt;  &lt;UpperMonthlyTrnLimitAmt&gt;10000000000&lt;/UpperMonthlyTrnLimitAmt&gt;  &lt;UpperMonthlyTrnsCount&gt;100000&lt;/UpperMonthlyTrnsCount&gt;  &lt;UpperMonthlyApprovalReq&gt;N&lt;/UpperMonthlyApprovalReq&gt;  &lt;/FuncAccess&gt;  &lt;/FuncsAccessList&gt;  &lt;/Body&gt; &lt;/CustPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustPermissions&quot;,&quot;10260000&quot;)

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
	
}



vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current_cif&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${current_cif}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current_cif&quot;))
def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
def dbResult = vars.getObject(&quot;resultSetVariable&quot;)
log.info(dbResult.toString())

def messages = []

dbResult.each { map -&gt;
    def permissionName = map[&apos;OPERATION_NAME&apos;]
    def permissionIds = vars.getObject(&quot;permissionFunctionMap&quot;).get(permissionName)
    log.info(&quot;permissionIds:&quot; + permissionIds)
    def limitPeriod = map[&apos;LIMIT_PERIOD&apos;]
    def limitAmount = map[&apos;LIMIT_AMOUNT&apos;]
    def approvalReq = map[&apos;ALLOW_APPROVAL&apos;]

    if (permissionIds) {
        permissionIds.each { permissionId -&gt;
        def itFuncGrpId = &quot;&quot;
        def itFuncId = &quot;&quot;
        def itAcctNum = &quot;&quot;
        def itApprovalReq = &quot;&quot;
        def itEnabled = &quot;&quot;
            def selectFuncAccess = response.Body.FuncsAccessList.FuncAccess.find {
            	itFuncGrpId = it.FuncGrpId.text()
	         itFuncId = it.FuncId.text()
	         itAcctNum = it.AcctNum.text()
	         itApprovalReq = it.ApprovalReq.text()
	         itEnabled = it.Enabled.text()
              (  (it.FuncGrpId.text() == permissionId.toString() &amp;&amp; it.FuncId.text() == &quot;GLBL&quot;) ||  (it.FuncId.text() == permissionId.toString()) )  
              &amp;&amp; (it.AcctNum.text() == &quot;GLBL&quot;) 
              &amp;&amp; (it.ApprovalReq.text() == approvalReq)
              &amp;&amp; (it.Enabled.text() == &quot;Y&quot;)
            }
log.info(&quot;selectFuncAccess=&quot;+selectFuncAccess)
            if (selectFuncAccess) {
                def limitProperty = &quot;&quot;
                switch (limitPeriod) {
                    case &quot;Per Transaction&quot;:
                        limitProperty = &quot;TrnLimitAmt&quot;
                        break
                    case &quot;Per Day&quot;:
                        limitProperty = &quot;DailyTrnLimitAmt&quot;
                        break
                    case &quot;Per Week&quot;:
                        limitProperty = &quot;WeeklyTrnLimitAmt&quot;
                        break
                    case &quot;Per Month&quot;:
                        limitProperty = &quot;MonthlyTrnLimitAmt&quot;
                        break
                }
                def limitFromServiceResponse = selectFuncAccess[limitProperty].text()

                if (limitProperty &amp;&amp; limitFromServiceResponse != limitAmount) {
                    messages &lt;&lt; &quot;Limit amount mismatch for Permission with CIB_PERMISSION_NAME=${permissionName} FUNCTION_ID(or function group id)=(${permissionId}) LIMIT_PERIOD=(${limitPeriod}) Respone_limitProperty=(${limitProperty}) where Source_DB_limit_Amount=(${limitAmount}) and Target_Respone_limit_Amount=(${limitFromServiceResponse})&quot;
                }
            } else {
                messages &lt;&lt; &quot;Can&apos;t find a valid entry in the Service Response for CIB_PERMISSION_NAME=${permissionName} and FUNCTION_ID=${permissionId} with values FuncGrpId=(${itFuncGrpId}) itFuncId=(${itFuncId}) AcctNum=${itAcctNum} ApprovalReq=(${itApprovalReq}) Enabled=(${itEnabled})&quot;
            }
        }
    } else {
        messages &lt;&lt; &quot;No Function Id found in the database table for PERMISSION_NAME=${permissionName}&quot;
    }
}

 props.get(&quot;printAssertions&quot;)(messages)


</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">

import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_114_SPRINT4_LIMITS_CUSTOMER_PER_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.CIF = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66720">CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;data from db:&quot;+listOfMaps.toString())
def resultMap = [:]
listOfMaps.eachWithIndex{
	map, index -&gt;
  def cif = map[&apos;CIF&apos;]
  def accountNumber = map[&apos;BANKING_ACCOUNT&apos;]
  def limitPeriod = map[&apos;LIMIT_PERIOD&apos;]
  def limitAmount = map[&apos;LIMIT_AMOUNT&apos;]
  if (!resultMap.containsKey(cif)) {
    resultMap[cif] = []
      def variableName = &quot;vars_db_cifs_${index + 1}&quot;
      if (!vars.get(variableName)) {
	    vars.put(variableName, cif+&quot;_&quot;+accountNumber)
	    log.info(&quot;vars_db_accountNumbers--&quot;+cif)
	  }
  }
  resultMap[cif].add([accountNumber: accountNumber, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_cifs&quot;, resultMap.keySet().toArray())
log.info(&quot;db modified  data:&quot;+resultMap)
log.info(&quot;db modified-map&apos;s keys:&quot;+resultMap.keySet().toArray().toString())
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach CIF in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt; &#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;TerminalId&gt;${terminalId}&lt;/TerminalId&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
    &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
   &lt;AcctNum&gt;${account}&lt;/AcctNum&gt;&#xd;
 &#xd;
  &lt;/Body&gt;&#xd;
&lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;CustPermissions&quot;,&quot;10260000&quot;)

def current_CIF_Account = vars.get(&quot;current&quot;)

def result = current_CIF_Account.split(&quot;_&quot;)
	

if ( result[0].toString()) {
	vars.put(&quot;cif&quot;, result[0].toString())
    
	if (result[1].toString()) {
            vars.put(&quot;account&quot;, result[1].toString())
        } else {
            log.error(&quot;No matching account found for cif=&quot;+result[0].toString())
        }
	
	log.info(&quot;cif:&quot;+ vars.get(&quot;cif&quot;))
	log.info(&quot;account:&quot;+ vars.get(&quot;account&quot;))
	
} else {
    log.error(&quot;No matching data found for CIF_AccountNumber=}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} CIF=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult 
import java.text.SimpleDateFormat
import java.util.Date
import oracle.sql.TIMESTAMP

log.info(&quot;************************Data Verification***************************&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
log.info(&quot;httpResponse=&quot; + httpResponse)
def custPermissionsInqRs = new XmlParser().parseText(httpResponse)
log.info(vars.get(&quot;service_name&quot;) + &quot; Inq Response Status Code: &quot; + custPermissionsInqRs.MsgRsHdr.StatusCode.text())

def dbResult = props.get(&quot;db_rs&quot;)
def messages = &quot;&quot;

dbResult.each { cif, bankingAccountsFromDB -&gt;
    try {
        bankingAccountsFromDB.each { bankingAccountNumber -&gt;
            def selectAcctAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { it.AcctNum.text() == bankingAccountNumber  &amp;&amp; it.FuncId.text() == &apos;GLBL&apos; }
log.info(&quot;selectAcctAccess=&quot;+selectAcctAccess);
            if (selectAcctAccess == null) {
                messages += &quot;Can&apos;t find an entry in the Service Response for BANKING_ACCOUNT_NUMBER=&quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot;.\n\r&quot;
            } else {
                if (selectAcctAccess.Enabled.text() != &apos;Y&apos;) {
                    messages += &quot;Account with banking account number &quot; + bankingAccountNumber + &quot; and CIF=&quot; + cif + &quot; is not Enabled.\n\r&quot;
                }
            }
        }
    } catch (Exception e) {
        messages += &quot;Failed to parse XML response. CIF=&quot; + cif + &quot;. Detailed_Message=[&quot; + e.toString() + &quot;].\n\r&quot;
    }
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} =${current}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_114_SPRINT4_LIMITS_CUSTOMER_PER_ACCOUNT_PER_PERMISSION" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_114_SPRINT4_LIMITS_CUSTOMER_PER_ACCOUNT_PER_PERMISSION</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value">OBJECT_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value">PERMISSION_NAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">CustPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10260000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
--SELECT * From NCIB_114_SPRINT4_LIMITS_CUSTOMER_PER_ACCOUNT_PER_PERMISSION
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
    //log.info(&quot;Debugging:cif=&quot;+cif)
    def permission_column_name = vars.get(&quot;permission_column_name&quot;)
    def permission = map[permission_column_name]
    
    def account_column_name = vars.get(&quot;account_column_name&quot;)
    def accountNumber = map[account_column_name]
    //log.info(&quot;Debugging:accountNumber=&quot;+accountNumber)
    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    //log.info(&quot;Debugging:limitPeriod=&quot;+limitPeriod)
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]

//log.info(&quot;Debugging:lmt_mnt_column_name=&quot;+lmt_mnt_column_name)
//log.info(&quot;Debugging:map=&quot;+map)
    

    if (!resultMap.containsKey(cif)) {
        resultMap[cif] = [:]
    }

 

    if (!resultMap[cif].containsKey(accountNumber)) {
        resultMap[cif][accountNumber] = []
        def variableName = &quot;for_each_input_param_${index + 1}&quot;
		if (!vars.get(variableName)) {
		   vars.put(variableName, &quot;${cif}_${accountNumber}&quot;)
		   log.info(&quot;Debugging: variableName:${variableName} cif_account:${cif}_${accountNumber}&quot;)
		}
    }


    resultMap[cif][accountNumber].add([permission: permission, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

 

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString())

 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_cifs&quot;, resultMap.keySet().toArray())

 

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
  	&lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
  	&lt;AcctNum&gt;${account_var}&lt;/AcctNum&gt;&#xd;
  	&lt;Enabled&gt;${function_enabled}&lt;/Enabled&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;CustPermissionsInqRs&gt;&lt;MsgRsHdr&gt;&lt;StatusCode&gt;I000000&lt;/StatusCode&gt;&lt;RqUID&gt;SMEW230410acebbecb499565656&lt;/RqUID&gt;&lt;/MsgRsHdr&gt;&lt;Body&gt;&lt;RecCtrlOut&gt;&lt;MatchedRecs&gt;32&lt;/MatchedRecs&gt;&lt;SentRecs&gt;32&lt;/SentRecs&gt;&lt;/RecCtrlOut&gt;&lt;CustNickname&gt;19129&lt;/CustNickname&gt;&lt;SbcrptnStatus&gt;A&lt;/SbcrptnStatus&gt;&lt;CreationTmstmp&gt;2023-05-24 16:15:56.912422&lt;/CreationTmstmp&gt;&lt;SvcPackId&gt;1&lt;/SvcPackId&gt;&lt;NameEn&gt;Default Service Package&lt;/NameEn&gt;&lt;NameAr&gt;الباكج الافتراضية&lt;/NameAr&gt;&lt;FuncsAccessList&gt;&lt;FuncAccess&gt;&lt;PermissionId&gt;162791&lt;/PermissionId&gt;&lt;FuncGrpId&gt;GLBL&lt;/FuncGrpId&gt;&lt;FuncId&gt;GLBL&lt;/FuncId&gt;&lt;AcctNum&gt;660110110-04800023197000-1 &lt;/AcctNum&gt;&lt;Enabled&gt;Y&lt;/Enabled&gt;&lt;ApprovalReq&gt;N&lt;/ApprovalReq&gt;&lt;TrnLimitAmt&gt;100&lt;/TrnLimitAmt&gt;&lt;TrnApprovalReq&gt;Y&lt;/TrnApprovalReq&gt;&lt;DailyTrnLimitAmt&gt;1000000&lt;/DailyTrnLimitAmt&gt;&lt;DailyTrnsCount&gt;9999&lt;/DailyTrnsCount&gt;&lt;DailyApprovalReq&gt;Y&lt;/DailyApprovalReq&gt;&lt;WeeklyTrnLimitAmt&gt;1000000&lt;/WeeklyTrnLimitAmt&gt;&lt;WeeklyTrnsCount&gt;9999&lt;/WeeklyTrnsCount&gt;&lt;WeeklyApprovalReq&gt;Y&lt;/WeeklyApprovalReq&gt;&lt;MonthlyTrnLimitAmt&gt;1000000&lt;/MonthlyTrnLimitAmt&gt;&lt;MonthlyTrnsCount&gt;9999&lt;/MonthlyTrnsCount&gt;&lt;MonthlyApprovalReq&gt;Y&lt;/MonthlyApprovalReq&gt;&lt;UpperEnabled&gt;Y&lt;/UpperEnabled&gt;&lt;UpperApprovalReq&gt;N&lt;/UpperApprovalReq&gt;&lt;UpperTrnLimitAmt&gt;100&lt;/UpperTrnLimitAmt&gt;&lt;UpperTrnApprovalReq&gt;Y&lt;/UpperTrnApprovalReq&gt;&lt;UpperDailyTrnLimitAmt&gt;1000000&lt;/UpperDailyTrnLimitAmt&gt;&lt;UpperDailyTrnsCount&gt;9999&lt;/UpperDailyTrnsCount&gt;&lt;UpperDailyApprovalReq&gt;Y&lt;/UpperDailyApprovalReq&gt;&lt;UpperWeeklyTrnLimitAmt&gt;1000000&lt;/UpperWeeklyTrnLimitAmt&gt;&lt;UpperWeeklyTrnsCount&gt;9999&lt;/UpperWeeklyTrnsCount&gt;&lt;UpperWeeklyApprovalReq&gt;Y&lt;/UpperWeeklyApprovalReq&gt;&lt;UpperMonthlyTrnLimitAmt&gt;1000000&lt;/UpperMonthlyTrnLimitAmt&gt;&lt;UpperMonthlyTrnsCount&gt;9999&lt;/UpperMonthlyTrnsCount&gt;&lt;UpperMonthlyApprovalReq&gt;Y&lt;/UpperMonthlyApprovalReq&gt;&lt;/FuncAccess&gt;&lt;/FuncsAccessList&gt;&lt;/Body&gt;&lt;/CustPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequestId&quot;)()

def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
	def cif =  result[0].toString()
if (cif) {
	vars.put(&quot;cif_var&quot;, cif)
    def account = result[1].toString()
	if (account) {
            vars.put(&quot;account_var&quot;, account)
            log.info(&quot;account_var:&quot;+ account)
        } else {
            log.error(&quot;No matching account found for cif=&quot;+ cif)
        }
	
	log.info(&quot;cif_var:&quot;+ vars.get(&quot;cif_var&quot;))
	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper 

log.info(&quot;************************Data Verification***************************&quot;)
log.info(&quot;ER998&quot;)
def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))
log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))
log.info(&quot;httpResponse=&quot;+httpResponse.toString())

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
log.info(&quot;custPermissionsInqRs&quot;+custPermissionsInqRs.toString())
def permissionMap = vars.getObject(&quot;permissionFunctionMap&quot;) 
log.info(&quot;httpResponse=&quot;+httpResponse.toString())
def dbResult = props.get(&quot;db_rs&quot;)
log.info(&quot;dbResult=&quot;+dbResult.toString())
def messages =  &quot;&quot;


//log.info(&quot;getting db result &gt;&gt;&gt;&gt;&gt;&gt;&quot;+dbResult[vars.get(&quot;cif&quot;)][vars.get(&quot;account&quot;)])

def permissionNames = dbResult[vars.get(&quot;cif_var&quot;)][vars.get(&quot;account_var&quot;)]


def newMap = [:]

custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find{
    def permissionId = it.FuncId.text()
    def enabled = it.Enabled.text()
    newMap.put(permissionId, enabled)
}

log.info(&quot;new map&gt;&gt;&gt;&gt;&gt;&quot;+newMap.toString());
permissionNames.each { permissionName -&gt;
	def permissionIdList = permissionMap[permissionName]
    	log.info(&quot;permissionIdList:&quot;+permissionIdList)
	if(!permissionIdList){
		log.info(&quot;No matching permissionId found for permission name in DB : &quot; + permissionName)
		false
	}
   	log.info(&quot;working on db permission &quot;+permissionName)
    	try {
		def notenabled = false
		def neverfound = true
	
		permissionIdList.each{ id-&gt; 
			log.info(&quot;working on id:&quot;+id+&quot; found:&quot;+newMap[id+&quot;&quot;]);
			if (newMap[id+&quot;&quot;]) {
				neverfound = false
			}
			

			if (newMap[id+&quot;&quot;] &amp;&amp; newMap[id+&quot;&quot;] != &apos;Y&apos;) {
				notenabled = true
				log.info(&quot;XML Found &quot;+id+&quot; but not Enabled: &quot;+newMap[id+&quot;&quot;])
			} else if(newMap[id+&quot;&quot;]) {
				log.info(&quot;XML Found &quot;+id+&quot; and enabled&quot;)
			} else {
				log.info(&quot;XML Not found &quot;+id+&quot;&quot;)
			}
	     }

	
	if (notenabled) {
		messages += &quot;permission with USER_ID=${vars.get(&quot;cif&quot;)} Account:${vars.get(&quot;account&quot;)}, and PERMISSION_NAME=${permissionName} is not enabled.\n\r&quot;
	} else if(neverfound) {
		messages += &quot;Can&apos;t find an entry in the Service Response for USER_ID=${vars.get(&quot;cif&quot;)} Account:${vars.get(&quot;account&quot;)} for PERMISSION_NAME=${permissionName}\n\r&quot;
	}
    	
    } catch (Exception e) {666
        messages += &quot;Failed to parse XML response. Detailed_Message=[${e.toString()}].\n\r&quot;
    }
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_115_SPRINT4_LIMITS_DIVISION_CROSS_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">db_conn</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.BUSINESS_CIF = white_list.CIF </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1645806497">BUSINESS_CIF</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;) 
log.info(&quot;listOfMaps =&quot; + listOfMaps.toString())
def resultMap = [:]
def listOfGroupIdCIF = []
listOfMaps.eachWithIndex { map, index -&gt;
    def cif = map[&apos;BUSINESS_CIF&apos;]
    def groupId = map[&apos;MCR_DIVISION_ID&apos;]
    def permissionName = map[&apos;PERMISSION_NAME&apos;]
    def limitPeriod = map[&apos;LIMIT_PERIOD&apos;]
    def limitAmount = map[&apos;LIMIT_AMOUNT&apos;]

    if (!resultMap.containsKey(groupId)) {
        resultMap[groupId] = [:]
    }
    if (!resultMap[groupId].containsKey(cif)) {
        resultMap[groupId][cif] = []
        listOfGroupIdCIF.add(groupId + &quot;_&quot; + cif)
    }

    resultMap[groupId][cif].add([permissionName: permissionName, limitAmount: limitAmount, limitPeriod: limitPeriod])
}
props.put(&quot;db_rs&quot;, resultMap)
log.info(&quot;listOfGroupIdCIF:&quot;+ listOfGroupIdCIF)

listOfGroupIdCIF.eachWithIndex { groupId, index -&gt;
    def variableName = &quot;vars_db_groupId_cifs_${index + 1}&quot;
    if (!vars.get(variableName)) {
        vars.put(variableName, groupId)
        log.info(&quot;vars_db_groupId_cifs--&quot; + groupId)
    }
}

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">vars_db_groupId_cifs</stringProp>
          <stringProp name="ForeachController.returnVal">current</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${functionId}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &#xd;
  &lt;/MsgRqHdr&gt;&#xd;
  &lt;Body&gt;&#xd;
  &lt;GrpId&gt;${groupId}&lt;/GrpId&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;GrpPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW123456789&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;         &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;checker&lt;/NameEn&gt;         &lt;NameAr&gt;checker&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/GrpPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)(&quot;GrpPermissions&quot;,&quot;10290000&quot;)

def current_groupId_cif = vars.get(&quot;current&quot;)

def result = current_groupId_cif.split(&quot;_&quot;)

if (result.length &gt;= 2) {
    vars.put(&quot;groupId&quot;, result[0])
    vars.put(&quot;cif&quot;, result[1])

    log.info(&quot;cif:&quot; + vars.get(&quot;cif&quot;))
    log.info(&quot;groupId:&quot; + vars.get(&quot;groupId&quot;))
} else if (result.length == 1) {
    vars.put(&quot;groupId&quot;, result[0])
   
    log.error(&quot;No matching cif found for group = &quot; + result[0])
} else {
    log.error(&quot;No matching data found for groupId_CIF=&quot; + current_groupId_cif)
}

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;)
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}
		

vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;), httpResponse)
log.info(&quot;httpResponse&quot;+ httpResponse)





</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification for ${service_name} Group-CIF=${current}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult
        import groovy.util.XmlSlurper

        log.info(&quot;************************Data Verification***************************&quot;)

        def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;current&quot;))
        log.info(&quot;httpResponse=&quot; + httpResponse)

        def custAcctsAccessInqRs = new XmlSlurper().parseText(httpResponse)
        //log.info(vars.get(&quot;service_name&quot;) + &quot; Inq Response Status Code: &quot; + custAcctsAccessInqRs.MsgRsHdr.StatusCode.text())
	   def permissionFunctionMap = vars.getObject(&quot;permissionFunctionMap&quot;)
        def dbResult = props.get(&quot;db_rs&quot;)
        def messages =  &quot;&quot;
def groupId = vars.get(&quot;current&quot;)
def data = dbResult[groupId]
if (data) {
    def cif = data[0]
    log.info(&quot;cif=&quot; + cif)
     def operationNameList = data[1]
    log.info(&quot;operationNameList=&quot; + operationNameList)
    
    operationNameList.each { operationName -&gt;
def permissionId =permissionFunctionMap.get(current)
       def selectFuncAccess = custAcctsAccessInqRs.Body.FuncsAccessList.FuncAccess.find {
        it.FuncId.text() == permissionId
    } 
    
    
    }
    
 

    if (selectFuncAccess != null) {
        if (selectFuncAccess.Enabled.text() != &apos;Y&apos;) {
            messages += &quot;Permission with CIB_PERMISSION_NAME=${permissionName}, and FUNCTION_ID=${permissionId} is not enabled.\n\r&quot;
        } else {
            def limitProperty = &quot;&quot;
            switch (limitPeriod) {
                case &quot;Per Transaction&quot;:
                    limitProperty = &quot;TrnLimitAmt&quot;
                    break
                case &quot;Per Day&quot;:
                    limitProperty = &quot;DailyTrnLimitAmt&quot;
                    break
                case &quot;Per Week&quot;:
                    limitProperty = &quot;WeeklyTrnLimitAmt&quot;
                    break
                case &quot;Per Month&quot;:
                    limitProperty = &quot;MonthlyTrnLimitAmt&quot;
                    break
            }

            if (limitProperty &amp;&amp; selectFuncAccess[limitProperty].text() != limitAmount) {
                messages += &quot;Limit amount mismatch for Permission with CIB_PERMISSION_NAME=${permissionName}, FUNCTION_ID=${permissionId}, LIMIT_PERIOD=${limitPeriod}.\n\r&quot;
            }
        }
    } else {
        messages += &quot;Can&apos;t find an entry in the Service Response for CIB_PERMISSION_NAME=${permissionName}, and FUNCTION_ID=${permissionId}.\n\r&quot;
    }
		            
        }
        

 props.get(&quot;printAssertions&quot;)(messages)</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionName = map[&apos;CIB_PERMISSION_NAME&apos;]
    def functionId = map[&apos;FUNCTION_ID&apos;]
    
    if (!resultMap.containsKey(permissionName)) {
        resultMap[permissionName] = []
    }
    
    resultMap[permissionName] &lt;&lt; functionId
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_116_SPRINT4_LIMITS_DIVISION_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_116_SPRINT4_LIMITS_DIVISION_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">BUSINESS_CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value">BANKING_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_DIVISION_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">GrpPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10290000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def groupId = map[usr_grp_column_name]

    def account_column_name = vars.get(&quot;account_column_name&quot;)
    def account = map[account_column_name]

    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]
	
    if (!resultMap.containsKey(groupId)) {
        resultMap[groupId] = [:]
    }

    if (!resultMap[groupId].containsKey(cif)) {
        resultMap[groupId][cif] = []
        
        variableList.add(groupId+&quot;_&quot;+cif)
    }

    resultMap[groupId][cif].add([account: account, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} userId_cif:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;GrpId&gt;${groupId_var}&lt;/GrpId&gt;&#xd;
  	&lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
  	&lt;Enabled&gt;${function_enabled}&lt;/Enabled&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequestId&quot;)()
def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
	def group_Id =  result[0].toString()
if (group_Id) {
	vars.put(&quot;groupId_var&quot;, group_Id)
    def cif = result[1].toString()
	if (cif) {
            vars.put(&quot;cif_var&quot;, cif)
            log.info(&quot;cif_var:&quot;+ cif)
        } else {
            log.error(&quot;No matching account found for group_Id=&quot;+ group_Id)
        }
	
	log.info(&quot;groupId_var:&quot;+ vars.get(&quot;groupId_var&quot;))
	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper 

log.info(&quot;************************Data Verification***************************&quot;)
log.info(&quot;ER998&quot;)
def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))
log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))
log.info(&quot;httpResponse=&quot;+httpResponse.toString())

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)
log.info(&quot;custPermissionsInqRs&quot;+custPermissionsInqRs.toString())
log.info(&quot;httpResponse=&quot;+httpResponse.toString())
def dbResult = props.get(&quot;db_rs&quot;)
log.info(&quot;dbResult=&quot;+dbResult.toString())
def messages =  &quot;&quot;

def Group_Id = vars.get(&quot;groupId_var&quot;)
def CIF = vars.get(&quot;cif_var&quot;)

def dbValues = dbResult[Group_Id][CIF]
 log.info(&quot;dbValues-&gt;&quot;+dbValues)
if(dbValues){
	dbValues.each{ value -&gt;
		def accountNumber = value[&quot;account&quot;]
		def limitPeriod = value[&quot;limitPeriod&quot;]
		def limitAmount = value[&quot;limitAmount&quot;]
		log.info(&quot;Acc:-&quot;+accountNumber)
		if(accountNumber){
			try{
				 def selectAcctAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { it.AcctNum.text() == accountNumber }
				 log.info(&quot;selectAcctAccess:-&quot;+ selectAcctAccess)

				 if (selectAcctAccess != null &amp;&amp; selectAcctAccess != &quot;&quot;) {
			        if (selectAcctAccess.Enabled.text() != &apos;Y&apos;) {
			            log.info(&quot;Function not enabled&quot;);
			            messages += &quot;Permission with CIB_ACCOUNT=${accountNumber} is not enabled.\n\r&quot;
			        } else {
			            def limitProperty = &quot;&quot;
			            switch (limitPeriod) {
			                case &quot;Per Transaction&quot;:
			                    limitProperty = &quot;TrnLimitAmt&quot;
			                    break
			                case &quot;Per Day&quot;:
			                    limitProperty = &quot;DailyTrnLimitAmt&quot;
			                    break
			                case &quot;Per Week&quot;:
			                    limitProperty = &quot;WeeklyTrnLimitAmt&quot;
			                    break
			                case &quot;Per Month&quot;:
			                    limitProperty = &quot;MonthlyTrnLimitAmt&quot;
			                    break
			            }
			
			            if (limitProperty != &quot;&quot; &amp;&amp; selectAcctAccess[limitProperty].text() != limitAmount) {
			                log.info(&quot;Limit amount mismatch&quot;);
			                messages += &quot;Limit amount mismatch for ACCOUNT=${accountNumber},  LIMIT_PERIOD=${limitPeriod}.\n\r&quot;
			            } 
			        }
			    } else {
			        log.info(&quot;Cant find entry in service response&quot;)
			        messages += &quot;Can&apos;t find an entry in the Service Response for CIB_ACCOUNT=${accountNumber}\n\r&quot;
			    }

				 
			}catch(Exception e){
				//handle exception
				log.info(&quot;ERROR:-&quot;+e)
				
			}
		}else{
			//error message account not found

			messages += &quot;Cant find account CIB_ACCOUNT=${accountNumber}\n\r&quot;
			}
	}
	
	

}else {
    messages += &quot;No data found in the dbResult for Group_Id=${Group_Id} and CIF=${CIF}\n\r&quot;
}

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_116_SPRINT4_LIMITS_DIVISION_ACCOUNT_PERMISSION" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_116_SPRINT4_LIMITS_DIVISION_ACCOUNT_PERMISSION</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">BUSINESS_CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value">BANKING_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value">PERMISSION_NAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_DIVISION_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">GrpPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10290000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def groupId = map[usr_grp_column_name]

    def account_column_name = vars.get(&quot;account_column_name&quot;)
    def account = map[account_column_name]

    def permission_column_name = vars.get(&quot;permission_column_name&quot;)
    def permission = map[permission_column_name]

    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]
	
    if (!resultMap.containsKey(groupId)) {
        resultMap[groupId] = [:]
    }

    if (!resultMap[groupId].containsKey(account)) {
        resultMap[groupId][account] = []
        
        variableList.add(cif+&quot;_&quot;+groupId+&quot;_&quot;+account)
    }

    resultMap[groupId][account].add([permission: permission, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} cif_groupID_account:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;GrpId&gt;${groupId_var}&lt;/GrpId&gt;&#xd;
     &lt;AcctNum&gt;${account_var}&lt;/AcctNum&gt;&#xd;
  	&lt;Enabled&gt;${function_enabled}&lt;/Enabled&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequestId&quot;)()

def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
def cif =  result[0].toString()
if (cif) {
	vars.put(&quot;cif_var&quot;, cif)
    def group_Id = result[1].toString()
	if (group_Id) {
            vars.put(&quot;groupId_var&quot;, group_Id)
            log.info(&quot;groupId_var:&quot;+ group_Id)
            def account = result[2].toString()
            if (account) {
            	vars.put(&quot;account_var&quot;, account)
			log.info(&quot;account_var:&quot;+account)
            }else{
            		log.error(&quot;No matching account found for cif=&quot;+ cif+&quot; and group_Id=&quot;+group_Id)
            	}
        } else {
            log.error(&quot;No matching group_Id found for cif=&quot;+ cif)
        }
	
	log.info(&quot;cif_var:&quot;+ vars.get(&quot;cif_var&quot;))
	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

 

log.info(&quot;************************Data Verification***************************&quot;)

log.info(&quot;ER998&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;httpResponse=&quot; + httpResponse.toString())

 

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)

log.info(&quot;custPermissionsInqRs=&quot; + custPermissionsInqRs.toString())


 

def dbResult = props.get(&quot;db_rs&quot;)

 def messages = &quot;&quot;

 

def Group_Id = vars.get(&quot;groupId_var&quot;)

def CIF = vars.get(&quot;cif_var&quot;)

def account = vars.get(&quot;account_var&quot;)

 

def dbValues = dbResult[Group_Id][account]

log.info(&quot;dbValues-&gt;&quot; + dbValues)

 

if (dbValues) {

    dbValues.each { value -&gt;

        def permissionName = value[&quot;permission&quot;]

        def limitPeriod = value[&quot;limitPeriod&quot;]

        def limitAmount = value[&quot;limitAmount&quot;]

        log.info(&quot;permissionName:-&quot; + permissionName)

 

        def permissionIds = vars.getObject(&quot;permissionFunctionMap&quot;).get(permissionName)

        log.info(&quot;permissionIds-&gt;&quot; + permissionIds)


        if (permissionIds) {

            try {

                def permission_id

                def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { access -&gt;

                    def permissionId = access.FuncId.text()

                    def allFoundAndEnabled = permissionIds.every { dbID -&gt;

                        permission_id = dbID

                        permissionId.contains(dbID) &amp;&amp; access.Enabled.text() == &apos;Y&apos;

                    }

                    //log.info(&quot;permission_id:-&quot; + permission_id)

                    allFoundAndEnabled

                }

 

                if (selectFuncAccess) {

                    messages += &quot;Permission with CIB_PERMISSION_NAME=${permissionName} and FUNCTION_ID=${permission_id} is not restricted for CIF=${CIF}. groupId=${Group_Id}. and account=${account}.\n\r&quot;

                } else {

                    def limitProperty = &quot;&quot;

                    switch (limitPeriod) {

                        case &quot;Per Transaction&quot;:

                            limitProperty = &quot;TrnLimitAmt&quot;

                            break

                        case &quot;Per Day&quot;:

                            limitProperty = &quot;DailyTrnLimitAmt&quot;

                            break

                        case &quot;Per Week&quot;:

                            limitProperty = &quot;WeeklyTrnLimitAmt&quot;

                            break

                        case &quot;Per Month&quot;:

                            limitProperty = &quot;MonthlyTrnLimitAmt&quot;

                            break

                    }


                    if (limitProperty != &quot;&quot; &amp;&amp; selectFuncAccess[limitProperty].text() != limitAmount) {

                        log.info(&quot;Limit amount mismatch&quot;);

                        messages += &quot;Limit amount mismatch for Permission_Name=${permissionName} with CIF=${CIF}. groupId=${Group_Id}. and account=${account}.  LIMIT_PERIOD=${limitPeriod}.\n\r&quot;

                    } 

                }

            } catch (Exception e) {

                //handle exception

                log.info(&quot;ERROR:-&quot; + e)

            }

        } else {

            log.info(&quot;Can&apos;t find entry in service response&quot;)
		   messages += &quot;No Permission name found in the dbResult for Group_Id=${Group_Id} and CIF=${CIF}\n\r&quot;

        }

    }

} else {

     messages += &quot;No data found in the dbResult for Group_Id=${Group_Id} and CIF=${CIF}\n\r&quot;

}

 

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_117_SPRINT4_LIMITS_USER" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_117_SPRINT4_LIMITS_USER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value">PERMISSION_NAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_USER_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">UsrPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10300000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def userId = map[usr_grp_column_name]

    def permission_column_name = vars.get(&quot;permission_column_name&quot;)
    def permission = map[permission_column_name]

    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]
	
    if (!resultMap.containsKey(userId)) {
        resultMap[userId] = [:]
    }

    if (!resultMap[userId].containsKey(cif)) {
        resultMap[userId][cif] = []
        
        variableList.add(userId+&quot;_&quot;+cif)
    }

    resultMap[userId][cif].add([permission: permission, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} userID_cif:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;UsrId&gt;${userId_var}&lt;/UsrId&gt;&#xd;
  	&lt;Enabled&gt;${function_enabled}&lt;/Enabled&gt;&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)()


def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
def userId =  result[0].toString()
if (userId) {
	vars.put(&quot;userId_var&quot;, userId)
    def cif = result[1].toString()
	if (cif) {
            vars.put(&quot;cif_var&quot;, cif)
            log.info(&quot;cif_var:&quot;+ cif)
        } else {
            log.error(&quot;No matching account found for userId=&quot;+ userId)
        }
	
	log.info(&quot;userId_var:&quot;+ vars.get(&quot;userId_var&quot;))	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

 

log.info(&quot;************************Data Verification***************************&quot;)

log.info(&quot;ER998&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;httpResponse=&quot; + httpResponse.toString())

 

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)

log.info(&quot;custPermissionsInqRs=&quot; + custPermissionsInqRs.toString())


 

def dbResult = props.get(&quot;db_rs&quot;)

 def messages = &quot;&quot;

 

def User_Id = vars.get(&quot;userId_var&quot;)

def CIF = vars.get(&quot;cif_var&quot;)

 

def dbValues = dbResult[User_Id][CIF]

log.info(&quot;dbValues-&gt;&quot; + dbValues)

 

if (dbValues) {

    dbValues.each { value -&gt;

        def permissionName = value[&quot;permission&quot;]

        def limitPeriod = value[&quot;limitPeriod&quot;]

        def limitAmount = value[&quot;limitAmount&quot;]

        log.info(&quot;permissionName:-&quot; + permissionName)

 

        def permissionIds = vars.getObject(&quot;permissionFunctionMap&quot;).get(permissionName)

        log.info(&quot;permissionIds-&gt;&quot; + permissionIds)


        if (permissionIds) {

            try {

                def permission_id

                def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { access -&gt;

                    def permissionId = access.FuncId.text()

                    def allFoundAndEnabled = permissionIds.every { dbID -&gt;

                        permission_id = dbID

                        permissionId.contains(dbID) &amp;&amp; access.Enabled.text() == &apos;Y&apos;

                    }

                   // log.info(&quot;permission_id:-&quot; + permission_id)

                    allFoundAndEnabled

                }

 

                if (selectFuncAccess) {

                    messages += &quot;Permission with CIB_PERMISSION_NAME=${permissionName} FUNCTION_ID=${permission_id} and limitPeriod=${limitPeriod} is not restricted for CIF=${CIF}. UserId=${User_Id}.\n\r&quot;

                } else {

                    def limitProperty = &quot;&quot;

                    switch (limitPeriod) {

                        case &quot;Per Transaction&quot;:

                            limitProperty = &quot;TrnLimitAmt&quot;

                            break

                        case &quot;Per Day&quot;:

                            limitProperty = &quot;DailyTrnLimitAmt&quot;

                            break

                        case &quot;Per Week&quot;:

                            limitProperty = &quot;WeeklyTrnLimitAmt&quot;

                            break

                        case &quot;Per Month&quot;:

                            limitProperty = &quot;MonthlyTrnLimitAmt&quot;

                            break

                    }


                    if (limitProperty != &quot;&quot; &amp;&amp; selectFuncAccess[limitProperty].text() != limitAmount) {

                        log.info(&quot;Limit amount mismatch&quot;);

                        messages += &quot;Limit amount mismatch for Permission_Name=${permissionName} with CIF=${CIF}. User_Id=${User_Id}  LIMIT_PERIOD=${limitPeriod}.\n\r&quot;

                    } 

                }

            } catch (Exception e) {

                //handle exception

                log.info(&quot;ERROR:-&quot; + e)

            }

        } else {

            log.info(&quot;Can&apos;t find entry in service response&quot;)

            messages += &quot;No Permission name found in the dbResult for User_Id=${User_Id} and CIF=${CIF}\n\r&quot;

        }

    }

} else {

    messages += &quot;No data found in the dbResult for User_Id=${User_Id} and CIF=${CIF}\n\r&quot;

}

 

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_118_SPRINT4_LIMITS_USER_ACCOUNT" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_118_SPRINT4_LIMITS_USER_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value">BANKING_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_USER_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">UsrPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10300000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def userId = map[usr_grp_column_name]

    def account_column_name = vars.get(&quot;account_column_name&quot;)
    def account = map[account_column_name]

    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]
	
    if (!resultMap.containsKey(userId)) {
        resultMap[userId] = [:]
    }

    if (!resultMap[userId].containsKey(cif)) {
        resultMap[userId][cif] = []
        
        variableList.add(userId+&quot;_&quot;+cif)
    }

    resultMap[userId][cif].add([account: account, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} userID_cif:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;UsrId&gt;${userId_var}&lt;/UsrId&gt;&#xd;
  	&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)()


def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
def userId =  result[0].toString()
if (userId) {
	vars.put(&quot;userId_var&quot;, userId)
    def cif = result[1].toString()
	if (cif) {
            vars.put(&quot;cif_var&quot;, cif)
            log.info(&quot;cif_var:&quot;+ cif)
        } else {
            log.error(&quot;No matching account found for userId=&quot;+ userId)
        }
	
	log.info(&quot;userId_var:&quot;+ vars.get(&quot;userId_var&quot;))	
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

 

log.info(&quot;************************Data Verification***************************&quot;)

log.info(&quot;ER998&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;httpResponse=&quot; + httpResponse.toString())

 

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)

log.info(&quot;custPermissionsInqRs=&quot; + custPermissionsInqRs.toString())


 

def dbResult = props.get(&quot;db_rs&quot;)

 def messages = &quot;&quot;

 

def User_Id = vars.get(&quot;userId_var&quot;)

def CIF = vars.get(&quot;cif_var&quot;)

 

def dbValues = dbResult[User_Id][CIF]

log.info(&quot;dbValues-&gt;&quot; + dbValues)

 

if (dbValues) {

    dbValues.each { value -&gt;

        	def accountNumber = value[&quot;account&quot;]
		def limitPeriod = value[&quot;limitPeriod&quot;]
		def limitAmount = value[&quot;limitAmount&quot;]
		log.info(&quot;Acc:-&quot;+accountNumber)
		if(accountNumber){
			try{
				 def selectAcctAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { it.AcctNum.text() == accountNumber }
				 log.info(&quot;selectAcctAccess:-&quot;+ selectAcctAccess)

				 if (selectAcctAccess != null &amp;&amp; selectAcctAccess != &quot;&quot;) {
			        if (selectAcctAccess.Enabled.text() != &apos;Y&apos;) {
			            log.info(&quot;Function not enabled&quot;);
			            messages += &quot;Permission with CIB_ACCOUNT=${accountNumber} for User_Id=${User_Id} is not enabled.\n\r&quot;
			        } else {
			            def limitProperty = &quot;&quot;
			            switch (limitPeriod) {
			                case &quot;Per Transaction&quot;:
			                    limitProperty = &quot;TrnLimitAmt&quot;
			                    break
			                case &quot;Per Day&quot;:
			                    limitProperty = &quot;DailyTrnLimitAmt&quot;
			                    break
			                case &quot;Per Week&quot;:
			                    limitProperty = &quot;WeeklyTrnLimitAmt&quot;
			                    break
			                case &quot;Per Month&quot;:
			                    limitProperty = &quot;MonthlyTrnLimitAmt&quot;
			                    break
			            }
			
			            if (limitProperty != &quot;&quot; &amp;&amp; selectAcctAccess[limitProperty].text() != limitAmount) {
			                log.info(&quot;Limit amount mismatch&quot;);
			                messages += &quot;Limit amount mismatch for ACCOUNT=${accountNumber},  LIMIT_PERIOD=${limitPeriod}.\n\r&quot;
			            } 
			        }
			    } else {
			        log.info(&quot;Cant find entry in service response&quot;)
			        messages += &quot;Can&apos;t find an entry in the Service Response for CIB_ACCOUNT=${accountNumber}\n\r&quot;
			    }

				 
			}catch(Exception e){
				//handle exception
				log.info(&quot;ERROR:-&quot;+e)
				
			}
		}else{
			//error message account not found

			messages += &quot;Cant find account CIB_ACCOUNT=${accountNumber}\n\r&quot;
			}
	}

} else {

    messages += &quot;No data found in the dbResult for User_Id=${User_Id} and CIF=${CIF}\n\r&quot;

}

 

 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="NCIB_118_SPRINT4_LIMITS_USER_ACCOUNT_PERMISSION" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="db_view" elementType="Argument">
              <stringProp name="Argument.name">db_view</stringProp>
              <stringProp name="Argument.value">NCIB_118_SPRINT4_LIMITS_USER_ACCOUNT_PERMISSION</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Table name in the Database</stringProp>
            </elementProp>
            <elementProp name="cif_column_name" elementType="Argument">
              <stringProp name="Argument.name">cif_column_name</stringProp>
              <stringProp name="Argument.value">CIF</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">The CIF Column name in the CIB VIEW ,please run describe view_name ; in SQL developer</stringProp>
            </elementProp>
            <elementProp name="connection_name" elementType="Argument">
              <stringProp name="Argument.name">connection_name</stringProp>
              <stringProp name="Argument.value">db_conn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="account_column_name" elementType="Argument">
              <stringProp name="Argument.name">account_column_name</stringProp>
              <stringProp name="Argument.value">BANKING_ACCOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="permission_column_name" elementType="Argument">
              <stringProp name="Argument.name">permission_column_name</stringProp>
              <stringProp name="Argument.value">PERMISSION_NAME</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="usr_grp_column_name" elementType="Argument">
              <stringProp name="Argument.name">usr_grp_column_name</stringProp>
              <stringProp name="Argument.value">MCR_USER_ID</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_prd_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_prd_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_PERIOD</stringProp>
              <stringProp name="Argument.desc">Limit period Table Name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lmt_mnt_column_name" elementType="Argument">
              <stringProp name="Argument.name">lmt_mnt_column_name</stringProp>
              <stringProp name="Argument.value">LIMIT_AMOUNT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_enabled" elementType="Argument">
              <stringProp name="Argument.name">function_enabled</stringProp>
              <stringProp name="Argument.value">Y</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="service_name" elementType="Argument">
              <stringProp name="Argument.name">service_name</stringProp>
              <stringProp name="Argument.value">UsrPermissions</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="function_id" elementType="Argument">
              <stringProp name="Argument.name">function_id</stringProp>
              <stringProp name="Argument.value">10300000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sampleXMLResponse" elementType="Argument">
              <stringProp name="Argument.name">sampleXMLResponse</stringProp>
              <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt; &lt;MsgRsHdr&gt; &lt;StatusCode&gt;I000000&lt;/StatusCode&gt; &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt; &lt;/MsgRsHdr&gt; &lt;Body&gt; &lt;RecCtrlOut&gt; &lt;SentRecs&gt;2&lt;/SentRecs&gt; &lt;/RecCtrlOut&gt; &lt;NameEn&gt;user1&lt;/NameEn&gt; &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt; &lt;FuncsAccessList&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt; &lt;Enabled&gt;N&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;FuncAccess&gt; &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt; &lt;Enabled&gt;Y&lt;/Enabled&gt; &lt;/FuncAccess&gt; &lt;/FuncsAccessList&gt; &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${db_view} Source DB Request" enabled="true">
          <stringProp name="TestPlan.serialize_threadgroups">false</stringProp>
          <elementProp name="Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="dataSource">${connection_name}</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT CIB_VIEW.* , white_list.SERVICE_PACKAGE_ID FROM ${db_view} cib_view ,NCIB_CUSTOMER_WHITELIST white_list where cib_view.${cif_column_name} = white_list.CIF 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">resultSetVariable</stringProp>
          <stringProp name="queryTimeout">0</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="queryFile"></stringProp>
          <boolProp name="queryArgumentsAreRegex">false</boolProp>
          <boolProp name="queryArgumentsAreXPath">false</boolProp>
          <stringProp name="dataSourceExpression"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="autocommit">true</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">yes</stringProp>
          <stringProp name="resultSetMaxRows">${limitResultSet}</stringProp>
        </JDBCSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="DB PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"> //Below commenyed becuase we use now a user defined varibles 
 //vars.put(&quot;db_view&quot;,org.apache.jmeter.threads.JMeterContextService.getContext().getThreadGroup().getName())


log.info(&quot;DB PreProcessor completed.&quot;)
 </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="DB Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-154448609">${cif_column_name}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="${db_view} PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;************************ DB PostProcessor ***************************&quot;)

def listOfMaps = vars.getObject(&quot;resultSetVariable&quot;)
def resultMap = [:]
def variableList = []
 
log.info(&quot;Debugging:&quot;+listOfMaps)
listOfMaps.eachWithIndex { map, index -&gt;
    def cif_column_name = vars.get(&quot;cif_column_name&quot;)
    def cif = map[cif_column_name]
   // log.info(&quot;Debugging:cif=&quot;+cif)

    def usr_grp_column_name = vars.get(&quot;usr_grp_column_name&quot;)
    def userId = map[usr_grp_column_name]

    def account_column_name = vars.get(&quot;account_column_name&quot;)
    def account = map[account_column_name]

    def permission_column_name = vars.get(&quot;permission_column_name&quot;)
    def permission = map[permission_column_name]

    def lmt_prd_column_name = vars.get(&quot;lmt_prd_column_name&quot;)
    def limitPeriod = map[lmt_prd_column_name]
    
    def lmt_mnt_column_name = vars.get(&quot;lmt_mnt_column_name&quot;)
    def limitAmount = map[lmt_mnt_column_name]
	
    if (!resultMap.containsKey(userId)) {
        resultMap[userId] = [:]
    }

    if (!resultMap[userId].containsKey(account)) {
        resultMap[userId][account] = []
        
        variableList.add(cif+&quot;_&quot;+userId+&quot;_&quot;+account)
    }

    resultMap[userId][account].add([permission: permission, limitPeriod: limitPeriod, limitAmount: limitAmount])
}

log.info(&quot;Debugging: Modified database data: &quot; + resultMap.toString())
log.info(&quot;Debugging: Modified database map&apos;s keys: &quot; + resultMap.keySet().toArray().toString()) 

props.put(&quot;db_rs&quot;, resultMap)
props.put(&quot;db_userIds&quot;, resultMap.keySet().toArray())

log.info(&quot;size  of result Map:-&quot;+resultMap.size()+&quot;  size  of variable List:-&quot;+variableList.size())
log.info(&quot;variableList:-&quot;+ variableList)

variableList.eachWithIndex{ value, index -&gt;
	def variableName = &quot;for_each_input_param_${index + 1}&quot;
    	   if (!vars.get(variableName)) {
        vars.put(variableName, value)
        log.info(&quot;Debugging:${variableName} cif_userID_account:&quot;+value)
    }
}

log.info(&quot;DB PostProcessor completed.&quot;)</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach USER GROUP in CIB Database" enabled="true">
          <stringProp name="ForeachController.inputVal">for_each_input_param</stringProp>
          <stringProp name="ForeachController.returnVal">for_each_output_param</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${service_name} Integration Service Call" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;${service_name}InqRq&gt;&#xd;
  &lt;MsgRqHdr&gt;&#xd;
    &lt;RqUID&gt;${channelCode}${random_id}&lt;/RqUID&gt;&#xd;
    &lt;SCId&gt;${channelCode}&lt;/SCId&gt;&#xd;
    &lt;FuncId&gt;${function_id}&lt;/FuncId&gt;&#xd;
    &lt;CustLangPref&gt;${LangPref}&lt;/CustLangPref&gt;&#xd;
    &lt;CustId&gt;&#xd;
      &lt;CIF&gt;${cif_var}&lt;/CIF&gt;&#xd;
    &lt;/CustId&gt;&#xd;
  &lt;/MsgRqHdr&gt;&#xd;
&#xd;
  &lt;Body&gt;&#xd;
     &lt;UsrId&gt;${userId_var}&lt;/UsrId&gt;&#xd;
     &lt;AcctNum&gt;${account_var}&lt;/AcctNum&gt;&#xd;
  	&#xd;
  &lt;/Body&gt;&#xd;
 &lt;/${service_name}InqRq&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}?channelCode=${channelCode}&amp;requestQueue=${queuePrefix}.${service_name}InqRq&amp;responseQueue=${queuePrefix}.${service_name}InqRs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SampleStaticData" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sampleXMLResponse" elementType="Argument">
                  <stringProp name="Argument.name">sampleXMLResponse</stringProp>
                  <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;UsrPermissionsInqRs&gt;     &lt;MsgRsHdr&gt;         &lt;StatusCode&gt;I000000&lt;/StatusCode&gt;         &lt;RqUID&gt;SMEW230410aertyuio56&lt;/RqUID&gt;     &lt;/MsgRsHdr&gt;     &lt;Body&gt;           &lt;RecCtrlOut&gt;             &lt;SentRecs&gt;2&lt;/SentRecs&gt;         &lt;/RecCtrlOut&gt;         &lt;NameEn&gt;user1&lt;/NameEn&gt;         &lt;NameAr&gt;user-mish-1&lt;/NameAr&gt;         &lt;FuncsAccessList&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;41400001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;N&lt;/Enabled&gt;             &lt;/FuncAccess&gt;             &lt;FuncAccess&gt;                 &lt;AcctNum&gt;68200001250000&lt;/AcctNum&gt;                 &lt;Enabled&gt;Y&lt;/Enabled&gt;             &lt;/FuncAccess&gt;         &lt;/FuncsAccessList&gt;     &lt;/Body&gt; &lt;/UsrPermissionsInqRs&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare Integration Call" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.get(&quot;prepareRequest&quot;)()


def current = vars.get(&quot;for_each_output_param&quot;)
log.info(&quot;ForEach.current=&quot;+ current)


def result = current.split(&quot;_&quot;)
def cif =  result[0].toString()
if (cif) {
	vars.put(&quot;cif_var&quot;, cif)
    def group_Id = result[1].toString()
	if (group_Id) {
            vars.put(&quot;userId_var&quot;, group_Id)
            log.info(&quot;userId_var:&quot;+ group_Id)
            def account = result[2].toString()
            if (account) {
            	vars.put(&quot;account_var&quot;, account)
			log.info(&quot;account_var:&quot;+account)
            }else{
            		log.error(&quot;No matching account found for cif=&quot;+ cif+&quot; and userId_var=&quot;+group_Id)
            	}
        } else {
            log.error(&quot;No matching group_Id found for cif=&quot;+ cif)
        }
	
	log.info(&quot;cif_var:&quot;+ vars.get(&quot;cif_var&quot;))
		
	
} else {
    log.error(&quot;No matching data found for =}&quot;+result[0].toString())
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Assert Integration Service Call was Successful" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//StatusCode[text() = &apos;I000000&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Integration Service  PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">
def httpResponse  = &quot;&quot;
def permissionIdList = []
if(&quot;static&quot; == vars.get(&quot;mode&quot;)){
	httpResponse  = vars.get(&quot;sampleXMLResponse&quot;).trim()
} else {
	httpResponse  = prev.getResponseDataAsString().trim().replaceFirst(&apos;^([\\W]+)&lt;&apos;,&apos;&lt;&apos;)
}


vars.put(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;), httpResponse)






</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Verification Sample for ${service_name} for:${for_each_output_param}" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.util.XmlSlurper

 

log.info(&quot;************************Data Verification***************************&quot;)

log.info(&quot;ER998&quot;)

def httpResponse = vars.get(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;ServiceResponse_&quot; + vars.get(&quot;service_name&quot;) + &quot;_&quot; + vars.get(&quot;for_each_output_param&quot;))

log.info(&quot;httpResponse=&quot; + httpResponse.toString())

 

def custPermissionsInqRs = new XmlSlurper().parseText(httpResponse)

log.info(&quot;custPermissionsInqRs=&quot; + custPermissionsInqRs.toString())


def dbResult = props.get(&quot;db_rs&quot;)
 def messages = &quot;&quot;


def User_Id = vars.get(&quot;userId_var&quot;)
def CIF = vars.get(&quot;cif_var&quot;)
def account = vars.get(&quot;account_var&quot;)

 

def dbValues = dbResult[User_Id][account]

log.info(&quot;dbValues-&gt;&quot; + dbValues)

 

if (dbValues) {

    dbValues.each { value -&gt;

        	 def permissionName = value[&quot;permission&quot;]

        def limitPeriod = value[&quot;limitPeriod&quot;]

        def limitAmount = value[&quot;limitAmount&quot;]

        log.info(&quot;permissionName:-&quot; + permissionName)

 

        def permissionIds = vars.getObject(&quot;permissionFunctionMap&quot;).get(permissionName)

        log.info(&quot;permissionIds-&gt;&quot; + permissionIds)


        if (permissionIds) {

            try {

                def permission_id

                def selectFuncAccess = custPermissionsInqRs.Body.FuncsAccessList.FuncAccess.find { access -&gt;

                    def permissionId = access.FuncId.text()

                    def allFoundAndEnabled = permissionIds.every { dbID -&gt;

                        permission_id = dbID

                        permissionId.contains(dbID) &amp;&amp; access.Enabled.text() == &apos;Y&apos;

                    }

                    //log.info(&quot;permission_id:-&quot; + permission_id)

                    allFoundAndEnabled

                }

 

                if (selectFuncAccess) {

                    messages += &quot;Permission with CIB_PERMISSION_NAME=${permissionName} and FUNCTION_ID=${permission_id} is not restricted for CIF=${CIF}. User_Id=${User_Id}. and account=${account}.\n\r&quot;

                } else {

                    def limitProperty = &quot;&quot;

                    switch (limitPeriod) {

                        case &quot;Per Transaction&quot;:

                            limitProperty = &quot;TrnLimitAmt&quot;

                            break

                        case &quot;Per Day&quot;:

                            limitProperty = &quot;DailyTrnLimitAmt&quot;

                            break

                        case &quot;Per Week&quot;:

                            limitProperty = &quot;WeeklyTrnLimitAmt&quot;

                            break

                        case &quot;Per Month&quot;:

                            limitProperty = &quot;MonthlyTrnLimitAmt&quot;

                            break

                    }


                    if (limitProperty != &quot;&quot; &amp;&amp; selectFuncAccess[limitProperty].text() != limitAmount) {

                        log.info(&quot;Limit amount mismatch&quot;);

                        messages += &quot;Limit amount mismatch for Permission_Name=${permissionName} with CIF=${CIF}. User_Id=${User_Id}. and account=${account}.  LIMIT_PERIOD=${limitPeriod}.\n\r&quot;

                    } 

                }

            } catch (Exception e) {

                //handle exception

                log.info(&quot;ERROR:-&quot; + e)

            }

        } else {

            log.info(&quot;Can&apos;t find entry in service response&quot;)
		   messages += &quot;No Permission name found in the dbResult for User_Id=${User_Id}. and CIF=${CIF}\n\r&quot;

        }

    }

} else {

    messages += &quot;No data found in the dbResult for User_Id=${User_Id} and CIF=${CIF}\n\r&quot;

}

 
 props.get(&quot;printAssertions&quot;)(messages)
</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Permission Map PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper 

def serializedListOfMaps = props.get(&quot;mySerializedListOfMaps&quot;)
def listOfMaps = new JsonSlurper().parseText(serializedListOfMaps)

def resultMap = [:]

listOfMaps.each { map -&gt;
    def permissionNames = map[&apos;CIB_PERMISSION_NAME&apos;].split(&apos;,&apos;)

    permissionNames.each { permissionName -&gt;
        def functionId = map[&apos;FUNCTION_ID&apos;]
        
        if (!resultMap.containsKey(permissionName.trim())) {
            resultMap[permissionName.trim()] = []
        }
        
        resultMap[permissionName.trim()] &lt;&lt; functionId
    }
}

// Store the resultMap in JMeter properties
vars.putObject(&quot;permissionFunctionMap&quot;, resultMap)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Verification Assertion for ${service_name} CIF=${currentCIF}" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def messages = vars.get(&quot;ErrorMessages&quot;)


if(messages !=null &amp;&amp; messages.size()&gt;0)
	{
		AssertionResult.setFailure(true)
AssertionResult.setFailureMessage(messages)
		
	}
	else{
		AssertionResult.setFailure(false)
		
		}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Test Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>false</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename">${__P(reportPathProps,)}${db_view}+&quot;.csv&quot;</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(reportPathProps,)}${db_view}+&quot;.csv&quot;</stringProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="session Info" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
